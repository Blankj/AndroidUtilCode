{
  "_from": "which@1.3.1",
  "_id": "which@1.3.1",
  "_inBundle": false,
  "_integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
  "_location": "/npm/which",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "which@1.3.1",
    "name": "which",
    "escapedName": "which",
    "rawSpec": "1.3.1",
    "saveSpec": null,
    "fetchSpec": "1.3.1"
  },
  "_requiredBy": [
    "/npm",
    "/npm/cross-spawn",
    "/npm/libnpx",
    "/npm/node-gyp",
    "/npm/npm-lifecycle",
    "/npm/pacote"
  ],
  "_resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
  "_shasum": "a45043d54f5805316da8d62f9f50918d3da70b0a",
  "_shrinkwrap": null,
  "_spec": "which@1.3.1",
  "_where": "/Users/rebecca/code/npm",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me"
  },
  "bin": {
    "which": "./bin/which"
  },
  "bugs": {
    "url": "https://github.com/isaacs/node-which/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "isexe": "^2.0.0"
  },
  "deprecated": false,
  "description": "Like which(1) unix command. Find the first instance of an executable in the PATH.",
  "devDependencies": {
    "mkdirp": "^0.5.0",
    "rimraf": "^2.6.2",
    "tap": "^12.0.1"
  },
  "files": [
    "which.js",
    "bin/which"
  ],
  "homepage": "https://github.com/isaacs/node-which#readme",
  "license": "ISC",
  "main": "which.js",
  "name": "which",
  "optionalDependencies": {},
  "readme": "# which\n\nLike the unix `which` utility.\n\nFinds the first instance of a specified executable in the PATH\nenvironment variable.  Does not cache the results, so `hash -r` is not\nneeded when the PATH changes.\n\n## USAGE\n\n```javascript\nvar which = require('which')\n\n// async usage\nwhich('node', function (er, resolvedPath) {\n  // er is returned if no \"node\" is found on the PATH\n  // if it is found, then the absolute path to the exec is returned\n})\n\n// sync usage\n// throws if not found\nvar resolved = which.sync('node')\n\n// if nothrow option is used, returns null if not found\nresolved = which.sync('node', {nothrow: true})\n\n// Pass options to override the PATH and PATHEXT environment vars.\nwhich('node', { path: someOtherPath }, function (er, resolved) {\n  if (er)\n    throw er\n  console.log('found at %j', resolved)\n})\n```\n\n## CLI USAGE\n\nSame as the BSD `which(1)` binary.\n\n```\nusage: which [-as] program ...\n```\n\n## OPTIONS\n\nYou may pass an options object as the second argument.\n\n- `path`: Use instead of the `PATH` environment variable.\n- `pathExt`: Use instead of the `PATHEXT` environment variable.\n- `all`: Return all matches, instead of just the first one.  Note that\n  this means the function returns an array of strings instead of a\n  single string.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/node-which.git"
  },
  "scripts": {
    "changelog": "bash gen-changelog.sh",
    "postversion": "npm run changelog && git add CHANGELOG.md && git commit -m 'update changelog - '${npm_package_version}",
    "test": "tap test/*.js --cov"
  },
  "version": "1.3.1"
}
