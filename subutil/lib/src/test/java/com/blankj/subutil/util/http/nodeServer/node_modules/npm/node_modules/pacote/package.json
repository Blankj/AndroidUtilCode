{
  "_from": "pacote@9.4.1",
  "_id": "pacote@9.4.1",
  "_inBundle": false,
  "_integrity": "sha512-YKSRsQqmeHxgra0KCdWA2FtVxDPUlBiCdmew+mSe44pzlx5t1ViRMWiQg18T+DREA+vSqYfKzynaToFR4hcKHw==",
  "_location": "/npm/pacote",
  "_phantomChildren": {
    "safe-buffer": "5.1.2"
  },
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "pacote@9.4.1",
    "name": "pacote",
    "escapedName": "pacote",
    "rawSpec": "9.4.1",
    "saveSpec": null,
    "fetchSpec": "9.4.1"
  },
  "_requiredBy": [
    "/npm",
    "/npm/libcipm",
    "/npm/libnpm"
  ],
  "_resolved": "https://registry.npmjs.org/pacote/-/pacote-9.4.1.tgz",
  "_shasum": "f0af2a52d241bce523d39280ac810c671db62279",
  "_shrinkwrap": null,
  "_spec": "pacote@9.4.1",
  "_where": "/Users/aeschright/code/npm-release",
  "author": {
    "name": "Kat MarchÃ¡n",
    "email": "kzm@sykosomatic.org"
  },
  "bugs": {
    "url": "https://github.com/zkat/pacote/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Charlotte Spencer",
      "email": "charlottelaspencer@gmail.com"
    },
    {
      "name": "Rebecca Turner",
      "email": "me@re-becca.org"
    }
  ],
  "dependencies": {
    "bluebird": "^3.5.3",
    "cacache": "^11.3.2",
    "figgy-pudding": "^3.5.1",
    "get-stream": "^4.1.0",
    "glob": "^7.1.3",
    "lru-cache": "^5.1.1",
    "make-fetch-happen": "^4.0.1",
    "minimatch": "^3.0.4",
    "minipass": "^2.3.5",
    "mississippi": "^3.0.0",
    "mkdirp": "^0.5.1",
    "normalize-package-data": "^2.4.0",
    "npm-package-arg": "^6.1.0",
    "npm-packlist": "^1.1.12",
    "npm-pick-manifest": "^2.2.3",
    "npm-registry-fetch": "^3.8.0",
    "osenv": "^0.1.5",
    "promise-inflight": "^1.0.1",
    "promise-retry": "^1.1.1",
    "protoduck": "^5.0.1",
    "rimraf": "^2.6.2",
    "safe-buffer": "^5.1.2",
    "semver": "^5.6.0",
    "ssri": "^6.0.1",
    "tar": "^4.4.8",
    "unique-filename": "^1.1.1",
    "which": "^1.3.1"
  },
  "deprecated": false,
  "description": "JavaScript package downloader",
  "devDependencies": {
    "nock": "^10.0.3",
    "npmlog": "^4.1.2",
    "nyc": "^13.1.0",
    "require-inject": "^1.4.3",
    "standard": "^12.0.1",
    "standard-version": "^4.4.0",
    "tacks": "^1.2.7",
    "tap": "^12.1.0",
    "tar-stream": "^1.6.2",
    "weallbehave": "^1.2.0",
    "weallcontribute": "^1.0.7"
  },
  "files": [
    "*.js",
    "lib"
  ],
  "homepage": "https://github.com/zkat/pacote#readme",
  "keywords": [
    "packages",
    "npm",
    "git"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "pacote",
  "optionalDependencies": {},
  "readme": "# pacote [![npm version](https://img.shields.io/npm/v/pacote.svg)](https://npm.im/pacote) [![license](https://img.shields.io/npm/l/pacote.svg)](https://npm.im/pacote) [![Travis](https://img.shields.io/travis/zkat/pacote.svg)](https://travis-ci.org/zkat/pacote) [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/zkat/pacote?svg=true)](https://ci.appveyor.com/project/zkat/pacote) [![Coverage Status](https://coveralls.io/repos/github/zkat/pacote/badge.svg?branch=latest)](https://coveralls.io/github/zkat/pacote?branch=latest)\n\n[`pacote`](https://github.com/zkat/pacote) is a Node.js library for downloading\n[npm](https://npmjs.org)-compatible packages. It supports all package specifier\nsyntax that `npm install` and its ilk support. It transparently caches anything\nneeded to reduce excess operations, using [`cacache`](https://npm.im/cacache).\n\n## Install\n\n`$ npm install --save pacote`\n\n## Table of Contents\n\n* [Example](#example)\n* [Features](#features)\n* [Contributing](#contributing)\n* [API](#api)\n  * [`manifest`](#manifest)\n  * [`packument`](#packument)\n  * [`extract`](#extract)\n  * [`tarball`](#tarball)\n  * [`tarball.stream`](#tarball-stream)\n  * [`tarball.toFile`](#tarball-to-file)\n  * ~~[`prefetch`](#prefetch)~~ (deprecated)\n  * [`clearMemoized`](#clearMemoized)\n  * [`options`](#options)\n\n### Example\n\n```javascript\nconst pacote = require('pacote')\n\npacote.manifest('pacote@^1').then(pkg => {\n  console.log('package manifest for registry pkg:', pkg)\n  // { \"name\": \"pacote\", \"version\": \"1.0.0\", ... }\n})\n\npacote.extract('http://hi.com/pkg.tgz', './here').then(() => {\n  console.log('remote tarball contents extracted to ./here')\n})\n```\n\n### Features\n\n* Handles all package types [npm](https://npm.im/npm) does\n* [high-performance, reliable, verified local cache](https://npm.im/cacache)\n* offline mode\n* authentication support (private git, private npm registries, etc)\n* github, gitlab, and bitbucket-aware\n* semver range support for git dependencies\n\n### Contributing\n\nThe pacote team enthusiastically welcomes contributions and project participation! There's a bunch of things you can do if you want to contribute! The [Contributor Guide](CONTRIBUTING.md) has all the information you need for everything from reporting bugs to contributing entire new features. Please don't hesitate to jump in if you'd like to, or even ask us questions if something isn't clear.\n\n### API\n\n#### <a name=\"manifest\"></a> `> pacote.manifest(spec, [opts])`\n\nFetches the *manifest* for a package. Manifest objects are similar and based\non the `package.json` for that package, but with pre-processed and limited\nfields. The object has the following shape:\n\n```javascript\n{\n  \"name\": PkgName,\n  \"version\": SemverString,\n  \"dependencies\": { PkgName: SemverString },\n  \"optionalDependencies\": { PkgName: SemverString },\n  \"devDependencies\": { PkgName: SemverString },\n  \"peerDependencies\": { PkgName: SemverString },\n  \"bundleDependencies\": false || [PkgName],\n  \"bin\": { BinName: Path },\n  \"_resolved\": TarballSource, // different for each package type\n  \"_integrity\": SubresourceIntegrityHash,\n  \"_shrinkwrap\": null || ShrinkwrapJsonObj\n}\n```\n\nNote that depending on the spec type, some additional fields might be present.\nFor example, packages from `registry.npmjs.org` have additional metadata\nappended by the registry.\n\n##### Example\n\n```javascript\npacote.manifest('pacote@1.0.0').then(pkgJson => {\n  // fetched `package.json` data from the registry\n})\n```\n\n#### <a name=\"packument\"></a> `> pacote.packument(spec, [opts])`\n\nFetches the *packument* for a package. Packument objects are general metadata\nabout a project corresponding to registry metadata, and include version and\n`dist-tag` information about a package's available versions, rather than a\nspecific version. It may include additional metadata not usually available\nthrough the individual package metadata objects.\n\nIt generally looks something like this:\n\n```javascript\n{\n  \"name\": PkgName,\n  \"dist-tags\": {\n    'latest': VersionString,\n    [TagName]: VersionString,\n    ...\n  },\n  \"versions\": {\n    [VersionString]: Manifest,\n    ...\n  }\n}\n```\n\nNote that depending on the spec type, some additional fields might be present.\nFor example, packages from `registry.npmjs.org` have additional metadata\nappended by the registry.\n\n##### Example\n\n```javascript\npacote.packument('pacote').then(pkgJson => {\n  // fetched package versions metadata from the registry\n})\n```\n\n#### <a name=\"extract\"></a> `> pacote.extract(spec, destination, [opts])`\n\nExtracts package data identified by `<spec>` into a directory named\n`<destination>`, which will be created if it does not already exist.\n\nIf `opts.digest` is provided and the data it identifies is present in the cache,\n`extract` will bypass most of its operations and go straight to extracting the\ntarball.\n\n##### Example\n\n```javascript\npacote.extract('pacote@1.0.0', './woot', {\n  digest: 'deadbeef'\n}).then(() => {\n  // Succeeds as long as `pacote@1.0.0` still exists somewhere. Network and\n  // other operations are bypassed entirely if `digest` is present in the cache.\n})\n```\n\n#### <a name=\"tarball\"></a> `> pacote.tarball(spec, [opts])`\n\nFetches package data identified by `<spec>` and returns the data as a buffer.\n\nThis API has two variants:\n\n* `pacote.tarball.stream(spec, [opts])` - Same as `pacote.tarball`, except it returns a stream instead of a Promise.\n* `pacote.tarball.toFile(spec, dest, [opts])` - Instead of returning data directly, data will be written directly to `dest`, and create any required directories along the way.\n\n##### Example\n\n```javascript\npacote.tarball('pacote@1.0.0', { cache: './my-cache' }).then(data => {\n  // data is the tarball data for pacote@1.0.0\n})\n```\n\n#### <a name=\"tarball-stream\"></a> `> pacote.tarball.stream(spec, [opts])`\n\nSame as `pacote.tarball`, except it returns a stream instead of a Promise.\n\n##### Example\n\n```javascript\npacote.tarball.stream('pacote@1.0.0')\n.pipe(fs.createWriteStream('./pacote-1.0.0.tgz'))\n```\n\n#### <a name=\"tarball-to-file\"></a> `> pacote.tarball.toFile(spec, dest, [opts])`\n\nLike `pacote.tarball`, but instead of returning data directly, data will be\nwritten directly to `dest`, and create any required directories along the way.\n\n##### Example\n\n```javascript\npacote.tarball.toFile('pacote@1.0.0', './pacote-1.0.0.tgz')\n.then(() => /* pacote tarball written directly to ./pacote-1.0.0.tgz */)\n```\n\n#### <a name=\"prefetch\"></a> `> pacote.prefetch(spec, [opts])`\n\n##### THIS API IS DEPRECATED. USE `pacote.tarball()` INSTEAD\n\nFetches package data identified by `<spec>`, usually for the purpose of warming\nup the local package cache (with `opts.cache`). It does not return anything.\n\n##### Example\n\n```javascript\npacote.prefetch('pacote@1.0.0', { cache: './my-cache' }).then(() => {\n  // ./my-cache now has both the manifest and tarball for `pacote@1.0.0`.\n})\n```\n\n#### <a name=\"clearMemoized\"></a> `> pacote.clearMemoized()`\n\nThis utility function can be used to force pacote to release its references\nto any memoized data in its various internal caches. It might help free\nsome memory.\n\n```javascript\npacote.manifest(...).then(() => pacote.clearMemoized)\n\n```\n\n#### <a name=\"options\"></a> `> options`\n\n`pacote` accepts [the options for\n`npm-registry-fetch`](https://npm.im/npm-registry-fetch#fetch-options) as-is,\nwith a couple of additional `pacote-specific` ones:\n\n##### <a name=\"dirPacker\"></a> `opts.dirPacker`\n\n* Type: Function\n* Default: Uses [`npm-packlist`](https://npm.im/npm-packlist) and [`tar`](https://npm.im/tar) to make a tarball.\n\nExpects a function that takes a single argument, `dir`, and returns a\n`ReadableStream` that outputs packaged tarball data. Used when creating tarballs\nfor package specs that are not already packaged, such as git and directory\ndependencies. The default `opts.dirPacker` does not execute `prepare` scripts,\neven though npm itself does.\n\n##### <a name=\"opts-enjoy-by\"></a> `opts.enjoy-by`\n\n* Alias: `opts.enjoyBy`\n* Type: Date-able\n* Default: undefined\n\nIf passed in, will be used while resolving to filter the versions for **registry\ndependencies** such that versions published **after** `opts.enjoy-by` are not\nconsidered -- as if they'd never been published.\n\n##### <a name=\"opts-include-deprecated\"></a> `opts.include-deprecated`\n\n* Alias: `opts.includeDeprecated`\n* Type: Boolean\n* Default: false\n\nIf false, deprecated versions will be skipped when selecting from registry range\nspecifiers. If true, deprecations do not affect version selection.\n\n##### <a name=\"opts-full-metadata\"></a> `opts.full-metadata`\n\n* Type: Boolean\n* Default: false\n\nIf `true`, the full packument will be fetched when doing metadata requests. By\ndefaul, `pacote` only fetches the summarized packuments, also called \"corgis\".\n\n##### <a name=\"opts-tag\"></a> `opts.tag`\n\n* Alias: `opts.defaultTag`\n* Type: String\n* Default: `'latest'`\n\nPackage version resolution tag. When processing registry spec ranges, this\noption is used to determine what dist-tag to treat as \"latest\". For more details\nabout how `pacote` selects versions and how `tag` is involved, see [the\ndocumentation for `npm-pick-manifest`](https://npm.im/npm-pick-manifest).\n\n##### <a name=\"opts-resolved\"></a> `opts.resolved`\n\n* Type: String\n* Default: null\n\nWhen fetching tarballs, this option can be passed in to skip registry metadata\nlookups when downloading tarballs. If the string is a `file:` URL, pacote will\ntry to read the referenced local file before attempting to do any further\nlookups. This option does not bypass integrity checks when `opts.integrity` is\npassed in.\n\n##### <a name=\"opts-where\"></a> `opts.where`\n\n* Type: String\n* Default: null\n\nPassed as an argument to [`npm-package-arg`](https://npm.im/npm-package-arg)\nwhen resolving `spec` arguments. Used to determine what path to resolve local\npath specs relatively from.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zkat/pacote.git"
  },
  "scripts": {
    "postrelease": "npm publish && git push --follow-tags",
    "prerelease": "npm t",
    "pretest": "standard",
    "release": "standard-version -s",
    "test": "nyc --all -- tap -J test/*.js",
    "test-docker": "docker run -it --rm --name pacotest -v \"$PWD\":/tmp -w /tmp node:latest npm test",
    "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
    "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
  },
  "version": "9.4.1"
}
