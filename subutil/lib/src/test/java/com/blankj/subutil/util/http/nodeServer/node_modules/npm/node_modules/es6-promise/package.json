{
  "_from": "es6-promise@^4.0.3",
  "_id": "es6-promise@4.2.4",
  "_inBundle": false,
  "_integrity": "sha512-/NdNZVJg+uZgtm9eS3O6lrOLYmQag2DjdEXuPaHlZ6RuVqgqaVZfgYCepEIKsLqwdQArOPtC3XzRLqGGfT8KQQ==",
  "_location": "/npm/es6-promise",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "es6-promise@^4.0.3",
    "name": "es6-promise",
    "escapedName": "es6-promise",
    "rawSpec": "^4.0.3",
    "saveSpec": null,
    "fetchSpec": "^4.0.3"
  },
  "_requiredBy": [
    "/npm/es6-promisify"
  ],
  "_resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.4.tgz",
  "_shasum": "dc4221c2b16518760bd8c39a52d8f356fc00ed29",
  "_shrinkwrap": null,
  "_spec": "es6-promise@^4.0.3",
  "_where": "/Users/rebecca/code/npm/node_modules/es6-promisify",
  "author": {
    "name": "Yehuda Katz, Tom Dale, Stefan Penner and contributors",
    "url": "Conversion to ES6 API by Jake Archibald"
  },
  "browser": {
    "vertx": false
  },
  "bugs": {
    "url": "https://github.com/stefanpenner/es6-promise/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A lightweight library that provides tools for organizing asynchronous code",
  "devDependencies": {
    "babel-plugin-transform-es2015-arrow-functions": "^6.22.0",
    "babel-plugin-transform-es2015-block-scoping": "^6.24.1",
    "babel-plugin-transform-es2015-classes": "^6.24.1",
    "babel-plugin-transform-es2015-computed-properties": "^6.24.1",
    "babel-plugin-transform-es2015-constants": "^6.1.4",
    "babel-plugin-transform-es2015-destructuring": "^6.23.0",
    "babel-plugin-transform-es2015-parameters": "^6.24.1",
    "babel-plugin-transform-es2015-shorthand-properties": "^6.24.1",
    "babel-plugin-transform-es2015-spread": "^6.22.0",
    "babel-plugin-transform-es2015-template-literals": "^6.22.0",
    "babel6-plugin-strip-class-callcheck": "^6.0.0",
    "broccoli-babel-transpiler": "^6.0.0",
    "broccoli-concat": "^3.1.0",
    "broccoli-merge-trees": "^2.0.0",
    "broccoli-rollup": "^2.0.0",
    "broccoli-stew": "^1.5.0",
    "broccoli-uglify-js": "^0.2.0",
    "broccoli-watchify": "^1.0.1",
    "ember-cli": "2.18.0-beta.2",
    "ember-cli-dependency-checker": "^2.1.0",
    "git-repo-version": "1.0.1",
    "json3": "^3.3.2",
    "mocha": "^4.0.1",
    "promises-aplus-tests-phantom": "^2.1.0-revise"
  },
  "directories": {
    "lib": "lib"
  },
  "files": [
    "dist",
    "lib",
    "es6-promise.d.ts",
    "auto.js",
    "!dist/test"
  ],
  "homepage": "https://github.com/stefanpenner/es6-promise#readme",
  "keywords": [
    "promises",
    "promise",
    "polyfill",
    "futures"
  ],
  "license": "MIT",
  "main": "dist/es6-promise.js",
  "name": "es6-promise",
  "namespace": "es6-promise",
  "optionalDependencies": {},
  "readme": "# ES6-Promise (subset of [rsvp.js](https://github.com/tildeio/rsvp.js)) [![Build Status](https://travis-ci.org/stefanpenner/es6-promise.svg?branch=master)](https://travis-ci.org/stefanpenner/es6-promise)\n\nThis is a polyfill of the [ES6 Promise](http://www.ecma-international.org/ecma-262/6.0/#sec-promise-constructor). The implementation is a subset of [rsvp.js](https://github.com/tildeio/rsvp.js) extracted by @jakearchibald, if you're wanting extra features and more debugging options, check out the [full library](https://github.com/tildeio/rsvp.js).\n\nFor API details and how to use promises, see the <a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\">JavaScript Promises HTML5Rocks article</a>.\n\n## Downloads\n\n* [es6-promise 27.86 KB (7.33 KB gzipped)](https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.js)\n* [es6-promise-auto 27.78 KB (7.3 KB gzipped)](https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.auto.js) - Automatically provides/replaces `Promise` if missing or broken.\n* [es6-promise-min 6.17 KB (2.4 KB gzipped)](https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.min.js)\n* [es6-promise-auto-min 6.19 KB (2.4 KB gzipped)](https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.auto.min.js) - Minified version of `es6-promise-auto` above.\n\n## CDN \n\nTo use via a CDN include this in your html:\n\n```html\n<!-- Automatically provides/replaces `Promise` if missing or broken. -->\n<script src=\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js\"></script> \n\n<!-- Minified version of `es6-promise-auto` below. -->\n<script src=\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js\"></script> \n\n```\n\n## Node.js\n\nTo install:\n\n```sh\nyarn add es6-promise\n```\n\nor\n\n```sh\nnpm install es6-promise\n```\n\nTo use:\n\n```js\nvar Promise = require('es6-promise').Promise;\n```\n\n\n## Usage in IE<9\n\n`catch` and `finally` are reserved keywords in IE<9, meaning\n`promise.catch(func)` or `promise.finally(func)` throw a syntax error. To work\naround this, you can use a string to access the property as shown in the\nfollowing example.\n\nHowever most minifiers will automatically fix this for you, making the\nresulting code safe for old browsers and production:\n\n```js\npromise['catch'](function(err) {\n  // ...\n});\n```\n\n```js\npromise['finally'](function() {\n  // ...\n});\n```\n\n## Auto-polyfill\n\nTo polyfill the global environment (either in Node or in the browser via CommonJS) use the following code snippet:\n\n```js\nrequire('es6-promise').polyfill();\n```\n\nAlternatively\n\n```js\nrequire('es6-promise/auto');\n```\n\nNotice that we don't assign the result of `polyfill()` to any variable. The `polyfill()` method will patch the global environment (in this case to the `Promise` name) when called.\n\n## Building & Testing\n\nYou will need to have PhantomJS installed globally in order to run the tests.\n\n`npm install -g phantomjs`\n\n* `npm run build` to build\n* `npm test` to run tests\n* `npm start` to run a build watcher, and webserver to test\n* `npm run test:server` for a testem test runner and watching builder\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stefanpenner/es6-promise.git"
  },
  "scripts": {
    "build": "ember build --environment production",
    "prepublishOnly": "ember build --environment production",
    "start": "ember s",
    "test": "ember test",
    "test:browser": "ember test --launch PhantomJS",
    "test:node": "ember test --launch Mocha",
    "test:server": "ember test --server"
  },
  "spm": {
    "main": "dist/es6-promise.js"
  },
  "typings": "es6-promise.d.ts",
  "version": "4.2.4"
}
