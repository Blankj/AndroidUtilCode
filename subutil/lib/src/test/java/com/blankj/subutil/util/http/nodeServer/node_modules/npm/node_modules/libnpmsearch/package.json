{
  "_args": [
    [
      "libnpmsearch@2.0.0",
      "/Users/zkat/Documents/code/work/npm"
    ]
  ],
  "_from": "libnpmsearch@2.0.0",
  "_id": "libnpmsearch@2.0.0",
  "_inBundle": false,
  "_integrity": "sha512-vd+JWbTGzOSfiOc+72MU6y7WqmBXn49egCCrIXp27iE/88bX8EpG64ST1blWQI1bSMUr9l1AKPMVsqa2tS5KWA==",
  "_location": "/npm/libnpmsearch",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "libnpmsearch@2.0.0",
    "name": "libnpmsearch",
    "escapedName": "libnpmsearch",
    "rawSpec": "2.0.0",
    "saveSpec": null,
    "fetchSpec": "2.0.0"
  },
  "_requiredBy": [
    "/npm",
    "/npm/libnpm"
  ],
  "_resolved": "https://registry.npmjs.org/libnpmsearch/-/libnpmsearch-2.0.0.tgz",
  "_shrinkwrap": null,
  "_spec": "2.0.0",
  "_where": "/Users/zkat/Documents/code/work/npm",
  "author": {
    "name": "Kat MarchÃ¡n",
    "email": "kzm@zkat.tech"
  },
  "bugs": {
    "url": "https://github.com/npm/libnpmsearch/issues"
  },
  "dependencies": {
    "figgy-pudding": "^3.5.1",
    "get-stream": "^4.0.0",
    "npm-registry-fetch": "^3.8.0"
  },
  "description": "Programmatic API for searching in npm and compatible registries.",
  "devDependencies": {
    "nock": "^9.6.1",
    "standard": "*",
    "standard-version": "*",
    "tap": "*",
    "weallbehave": "*",
    "weallcontribute": "*"
  },
  "homepage": "https://npmjs.com/package/libnpmsearch",
  "keywords": [
    "npm",
    "search",
    "api",
    "libnpm"
  ],
  "license": "ISC",
  "name": "libnpmsearch",
  "optionalDependencies": {},
  "readme": "# libnpmsearch [![npm version](https://img.shields.io/npm/v/libnpmsearch.svg)](https://npm.im/libnpmsearch) [![license](https://img.shields.io/npm/l/libnpmsearch.svg)](https://npm.im/libnpmsearch) [![Travis](https://img.shields.io/travis/npm/libnpmsearch.svg)](https://travis-ci.org/npm/libnpmsearch) [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/zkat/libnpmsearch?svg=true)](https://ci.appveyor.com/project/zkat/libnpmsearch) [![Coverage Status](https://coveralls.io/repos/github/npm/libnpmsearch/badge.svg?branch=latest)](https://coveralls.io/github/npm/libnpmsearch?branch=latest)\n\n[`libnpmsearch`](https://github.com/npm/libnpmsearch) is a Node.js library for\nprogrammatically accessing the npm search endpoint. It does **not** support\nlegacy search through `/-/all`.\n\n## Example\n\n```js\nconst search = require('libnpmsearch')\n\nconsole.log(await search('libnpm'))\n=>\n[\n  {\n    name: 'libnpm',\n    description: 'programmatic npm API',\n    ...etc\n  },\n  {\n    name: 'libnpmsearch',\n    description: 'Programmatic API for searching in npm and compatible registries',\n    ...etc\n  },\n  ...more\n]\n```\n\n## Install\n\n`$ npm install libnpmsearch`\n\n## Table of Contents\n\n* [Example](#example)\n* [Install](#install)\n* [API](#api)\n  * [search opts](#opts)\n  * [`search()`](#search)\n  * [`search.stream()`](#search-stream)\n\n### API\n\n#### <a name=\"opts\"></a> `opts` for `libnpmsearch` commands\n\nThe following opts are used directly by `libnpmsearch` itself:\n\n* `opts.limit` - Number of results to limit the query to. Default: 20\n* `opts.offset` - Offset number for results. Used with `opts.limit` for pagination. Default: 0\n* `opts.detailed` - If true, returns an object with `package`, `score`, and `searchScore` fields, with `package` being what would usually be returned, and the other two containing details about how that package scored. Useful for UIs. Default: false\n* `opts.sortBy` - Used as a shorthand to set `opts.quality`, `opts.maintenance`, and `opts.popularity` with values that prioritize each one. Should be one of `'optimal'`, `'quality'`, `'maintenance'`, or `'popularity'`. Default: `'optimal'`\n* `opts.maintenance` - Decimal number between `0` and `1` that defines the weight of `maintenance` metrics when scoring and sorting packages. Default: `0.65` (same as `opts.sortBy: 'optimal'`)\n* `opts.popularity` - Decimal number between `0` and `1` that defines the weight of `popularity` metrics when scoring and sorting packages. Default: `0.98` (same as `opts.sortBy: 'optimal'`)\n* `opts.quality` - Decimal number between `0` and `1` that defines the weight of `quality` metrics when scoring and sorting packages. Default: `0.5` (same as `opts.sortBy: 'optimal'`)\n\n`libnpmsearch` uses [`npm-registry-fetch`](https://npm.im/npm-registry-fetch).\nMost options are passed through directly to that library, so please refer to\n[its own `opts`\ndocumentation](https://www.npmjs.com/package/npm-registry-fetch#fetch-options)\nfor options that can be passed in.\n\nA couple of options of note for those in a hurry:\n\n* `opts.token` - can be passed in and will be used as the authentication token for the registry. For other ways to pass in auth details, see the n-r-f docs.\n* `opts.Promise` - If you pass this in, the Promises returned by `libnpmsearch` commands will use this Promise class instead. For example: `{Promise: require('bluebird')}`\n\n#### <a name=\"search\"></a> `> search(query, [opts]) -> Promise`\n\n`query` must be either a String or an Array of search terms.\n\nIf `opts.limit` is provided, it will be sent to the API to constrain the number\nof returned results. You may receive more, or fewer results, at the endpoint's\ndiscretion.\n\nThe returned Promise resolved to an Array of search results with the following\nformat:\n\n```js\n{\n  name: String,\n  version: SemverString,\n  description: String || null,\n  maintainers: [\n    {\n      username: String,\n      email: String\n    },\n    ...etc\n  ] || null,\n  keywords: [String] || null,\n  date: Date || null\n}\n```\n\nIf `opts.limit` is provided, it will be sent to the API to constrain the number\nof returned results. You may receive more, or fewer results, at the endpoint's\ndiscretion.\n\nFor streamed results, see [`search.stream`](#search-stream).\n\n##### Example\n\n```javascript\nawait search('libnpm')\n=>\n[\n  {\n    name: 'libnpm',\n    description: 'programmatic npm API',\n    ...etc\n  },\n  {\n    name: 'libnpmsearch',\n    description: 'Programmatic API for searching in npm and compatible registries',\n    ...etc\n  },\n  ...more\n]\n```\n\n#### <a name=\"search-stream\"></a> `> search.stream(query, [opts]) -> Stream`\n\n`query` must be either a String or an Array of search terms.\n\nIf `opts.limit` is provided, it will be sent to the API to constrain the number\nof returned results. You may receive more, or fewer results, at the endpoint's\ndiscretion.\n\nThe returned Stream emits one entry per search result, with each entry having\nthe following format:\n\n```js\n{\n  name: String,\n  version: SemverString,\n  description: String || null,\n  maintainers: [\n    {\n      username: String,\n      email: String\n    },\n    ...etc\n  ] || null,\n  keywords: [String] || null,\n  date: Date || null\n}\n```\n\nFor getting results in one chunk, see [`search`](#search-stream).\n\n##### Example\n\n```javascript\nsearch.stream('libnpm').on('data', console.log)\n=>\n// entry 1\n{\n  name: 'libnpm',\n  description: 'programmatic npm API',\n  ...etc\n}\n// entry 2\n{\n  name: 'libnpmsearch',\n  description: 'Programmatic API for searching in npm and compatible registries',\n  ...etc\n}\n// etc\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/libnpmsearch.git"
  },
  "scripts": {
    "postrelease": "npm publish && git push --follow-tags",
    "prerelease": "npm t",
    "pretest": "standard",
    "release": "standard-version -s",
    "test": "tap -J --100 test/*.js",
    "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
    "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
  },
  "version": "2.0.0"
}
