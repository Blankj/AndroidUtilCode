{
  "_args": [
    [
      "ansistyles@0.1.3",
      "/Users/rebecca/code/npm"
    ]
  ],
  "_from": "ansistyles@0.1.3",
  "_id": "ansistyles@0.1.3",
  "_inBundle": false,
  "_integrity": "sha1-XeYEFb2gcbs3EnhUyGT0GyMlRTk=",
  "_location": "/npm/ansistyles",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "ansistyles@0.1.3",
    "name": "ansistyles",
    "escapedName": "ansistyles",
    "rawSpec": "0.1.3",
    "saveSpec": null,
    "fetchSpec": "0.1.3"
  },
  "_requiredBy": [
    "/npm"
  ],
  "_resolved": "https://registry.npmjs.org/ansistyles/-/ansistyles-0.1.3.tgz",
  "_shrinkwrap": null,
  "_spec": "0.1.3",
  "_where": "/Users/rebecca/code/npm",
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "thlorenz.com"
  },
  "bugs": {
    "url": "https://github.com/thlorenz/ansistyles/issues"
  },
  "dependencies": {},
  "description": "Functions that surround a string with ansistyle codes so it prints in style.",
  "devDependencies": {},
  "gitHead": "27bf1bc65231bcc7fd109bf13b13601b51f8cd04",
  "homepage": "https://github.com/thlorenz/ansistyles#readme",
  "keywords": [
    "ansi",
    "style",
    "terminal",
    "console"
  ],
  "license": "MIT",
  "main": "ansistyles.js",
  "name": "ansistyles",
  "optionalDependencies": {},
  "readme": "# ansistyles [![build status](https://secure.travis-ci.org/thlorenz/ansistyles.png)](http://next.travis-ci.org/thlorenz/ansistyles)\n\nFunctions that surround a string with ansistyle codes so it prints in style.\n\nIn case you need colors, like `red`, have a look at [ansicolors](https://github.com/thlorenz/ansicolors).\n\n## Installation\n\n    npm install ansistyles\n\n## Usage\n\n```js\nvar styles = require('ansistyles');\n\nconsole.log(styles.bright('hello world'));    // prints hello world in 'bright' white\nconsole.log(styles.underline('hello world')); // prints hello world underlined\nconsole.log(styles.inverse('hello world'));   // prints hello world black on white\n```\n\n## Combining with ansicolors\n\nGet the ansicolors module:\n\n    npm install ansicolors\n\n```js\nvar styles = require('ansistyles')\n  , colors = require('ansicolors');\n\n  console.log(\n    // prints hello world underlined in blue on a green background\n    colors.bgGreen(colors.blue(styles.underline('hello world'))) \n  );\n```\n\n## Tests\n\nLook at the [tests](https://github.com/thlorenz/ansistyles/blob/master/test/ansistyles.js) to see more examples and/or run them via: \n\n    npm explore ansistyles && npm test\n\n## More Styles\n\nAs you can see from [here](https://github.com/thlorenz/ansistyles/blob/master/ansistyles.js#L4-L15), more styles are available,\nbut didn't have any effect on the terminals that I tested on Mac Lion and Ubuntu Linux.\n\nI included them for completeness, but didn't show them in the examples because they seem to have no effect.\n\n### reset\n\nA style reset function is also included, please note however that this is not nestable.\n\nTherefore the below only underlines `hell` only, but not `world`.\n\n```js\nconsole.log(styles.underline('hell' + styles.reset('o') + ' world'));\n```\n\nIt is essentially the same as:\n\n```js\nconsole.log(styles.underline('hell') + styles.reset('') + 'o world');\n```\n\n\n\n## Alternatives\n\n**ansistyles** tries to meet simple use cases with a very simple API. However, if you need a more powerful ansi formatting tool, \nI'd suggest to look at the [features](https://github.com/TooTallNate/ansi.js#features) of the [ansi module](https://github.com/TooTallNate/ansi.js).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/ansistyles.git"
  },
  "scripts": {
    "test": "node test/ansistyles.js"
  },
  "version": "0.1.3"
}
