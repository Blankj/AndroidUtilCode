{
  "_from": "npm-bundled@^1.0.1",
  "_id": "npm-bundled@1.0.5",
  "_inBundle": false,
  "_integrity": "sha512-m/e6jgWu8/v5niCUKQi9qQl8QdeEduFA96xHDDzFGqly0OOjI7c+60KM/2sppfnUU9JJagf+zs+yGhqSOFj71g==",
  "_location": "/fsevents/npm-bundled",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "npm-bundled@^1.0.1",
    "name": "npm-bundled",
    "escapedName": "npm-bundled",
    "rawSpec": "^1.0.1",
    "saveSpec": null,
    "fetchSpec": "^1.0.1"
  },
  "_requiredBy": [
    "/fsevents/npm-packlist"
  ],
  "_resolved": "https://registry.npmjs.org/npm-bundled/-/npm-bundled-1.0.5.tgz",
  "_shasum": "3c1732b7ba936b3a10325aef616467c0ccbcc979",
  "_shrinkwrap": null,
  "_spec": "npm-bundled@^1.0.1",
  "_where": "/Users/pdunkel1/Office/fsevents/fsevents/node_modules/npm-packlist",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/npm/npm-bundled/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "list things in node_modules that are bundledDependencies, or transitive dependencies thereof",
  "devDependencies": {
    "mkdirp": "^0.5.1",
    "mutate-fs": "^1.1.0",
    "rimraf": "^2.6.1",
    "tap": "^12.0.1"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/npm/npm-bundled#readme",
  "license": "ISC",
  "main": "index.js",
  "name": "npm-bundled",
  "optionalDependencies": {},
  "readme": "# npm-bundled\n\nRun this in a node package, and it'll tell you which things in\nnode_modules are bundledDependencies, or transitive dependencies of\nbundled dependencies.\n\n[![Build Status](https://travis-ci.org/npm/npm-bundled.svg?branch=master)](https://travis-ci.org/npm/npm-bundled)\n\n## USAGE\n\nTo get the list of deps at the top level that are bundled (or\ntransitive deps of a bundled dep) run this:\n\n```js\nconst bundled = require('npm-bundled')\n\n// async version\nbundled({ path: '/path/to/pkg/defaults/to/cwd'}, (er, list) => {\n  // er means it had an error, which is _hella_ weird\n  // list is a list of package names, like `fooblz` or `@corp/blerg`\n  // the might not all be deps of the top level, because transitives\n})\n\n// async promise version\nbundled({ path: '/path/to/pkg/defaults/to/cwd'}).then(list => {\n  // so promisey!\n  // actually the callback version returns a promise, too, it just\n  // attaches the supplied callback to the promise\n})\n\n// sync version, throws if there's an error\nconst list = bundled({ path: '/path/to/pkg/defaults/to/cwd'})\n```\n\nThat's basically all you need to know.  If you care to dig into it,\nyou can also use the `bundled.Walker` and `bundled.WalkerSync`\nclasses to get fancy.\n\nThis library does not write anything to the filesystem, but it _may_\nhave undefined behavior if the structure of `node_modules` changes\nwhile it's reading deps.\n\nAll symlinks are followed.  This means that it can lead to surprising\nresults if a symlinked bundled dependency has a missing dependency\nthat is satisfied at the top level.  Since package creation resolves\nsymlinks as well, this is an edge case where package creation and\ndevelopment environment are not going to be aligned, and is best\navoided.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/npm-bundled.git"
  },
  "scripts": {
    "postpublish": "git push origin --all; git push origin --tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "test": "tap test/*.js -J --100"
  },
  "version": "1.0.5"
}
