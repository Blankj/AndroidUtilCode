{
  "_args": [
    [
      "osenv@0.1.5",
      "/Users/rebecca/code/npm"
    ]
  ],
  "_from": "osenv@0.1.5",
  "_id": "osenv@0.1.5",
  "_inBundle": false,
  "_integrity": "sha512-0CWcCECdMVc2Rw3U5w9ZjqX6ga6ubk1xDVKxtBQPK7wis/0F2r9T6k4ydGYhecl7YUBxBVxhL5oisPsNxAPe2g==",
  "_location": "/npm/osenv",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "osenv@0.1.5",
    "name": "osenv",
    "escapedName": "osenv",
    "rawSpec": "0.1.5",
    "saveSpec": null,
    "fetchSpec": "0.1.5"
  },
  "_requiredBy": [
    "/npm",
    "/npm/node-gyp",
    "/npm/nopt",
    "/npm/npm-package-arg",
    "/npm/pacote"
  ],
  "_resolved": "https://registry.npmjs.org/osenv/-/osenv-0.1.5.tgz",
  "_shrinkwrap": null,
  "_spec": "0.1.5",
  "_where": "/Users/rebecca/code/npm",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/npm/osenv/issues"
  },
  "dependencies": {
    "os-homedir": "^1.0.0",
    "os-tmpdir": "^1.0.0"
  },
  "description": "Look up environment settings specific to different operating systems",
  "devDependencies": {
    "tap": "^11.1.0"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "osenv.js"
  ],
  "homepage": "https://github.com/npm/osenv#readme",
  "keywords": [
    "environment",
    "variable",
    "home",
    "tmpdir",
    "path",
    "prompt",
    "ps1"
  ],
  "license": "ISC",
  "main": "osenv.js",
  "name": "osenv",
  "optionalDependencies": {},
  "readme": "# osenv\n\nLook up environment settings specific to different operating systems.\n\n## Usage\n\n```javascript\nvar osenv = require('osenv')\nvar path = osenv.path()\nvar user = osenv.user()\n// etc.\n\n// Some things are not reliably in the env, and have a fallback command:\nvar h = osenv.hostname(function (er, hostname) {\n  h = hostname\n})\n// This will still cause it to be memoized, so calling osenv.hostname()\n// is now an immediate operation.\n\n// You can always send a cb, which will get called in the nextTick\n// if it's been memoized, or wait for the fallback data if it wasn't\n// found in the environment.\nosenv.hostname(function (er, hostname) {\n  if (er) console.error('error looking up hostname')\n  else console.log('this machine calls itself %s', hostname)\n})\n```\n\n## osenv.hostname()\n\nThe machine name.  Calls `hostname` if not found.\n\n## osenv.user()\n\nThe currently logged-in user.  Calls `whoami` if not found.\n\n## osenv.prompt()\n\nEither PS1 on unix, or PROMPT on Windows.\n\n## osenv.tmpdir()\n\nThe place where temporary files should be created.\n\n## osenv.home()\n\nNo place like it.\n\n## osenv.path()\n\nAn array of the places that the operating system will search for\nexecutables.\n\n## osenv.editor() \n\nReturn the executable name of the editor program.  This uses the EDITOR\nand VISUAL environment variables, and falls back to `vi` on Unix, or\n`notepad.exe` on Windows.\n\n## osenv.shell()\n\nThe SHELL on Unix, which Windows calls the ComSpec.  Defaults to 'bash'\nor 'cmd'.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/osenv.git"
  },
  "scripts": {
    "postpublish": "git push origin --all; git push origin --tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "test": "tap test/*.js"
  },
  "version": "0.1.5"
}
