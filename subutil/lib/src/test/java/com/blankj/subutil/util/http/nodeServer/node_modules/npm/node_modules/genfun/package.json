{
  "_from": "genfun@^5.0.0",
  "_id": "genfun@5.0.0",
  "_inBundle": false,
  "_integrity": "sha512-KGDOARWVga7+rnB3z9Sd2Letx515owfk0hSxHGuqjANb1M+x2bGZGqHLiozPsYMdM2OubeMni/Hpwmjq6qIUhA==",
  "_location": "/npm/genfun",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "genfun@^5.0.0",
    "name": "genfun",
    "escapedName": "genfun",
    "rawSpec": "^5.0.0",
    "saveSpec": null,
    "fetchSpec": "^5.0.0"
  },
  "_requiredBy": [
    "/npm/protoduck"
  ],
  "_resolved": "https://registry.npmjs.org/genfun/-/genfun-5.0.0.tgz",
  "_shasum": "9dd9710a06900a5c4a5bf57aca5da4e52fe76537",
  "_shrinkwrap": null,
  "_spec": "genfun@^5.0.0",
  "_where": "/Users/zkat/Documents/code/work/npm/node_modules/protoduck",
  "author": {
    "name": "Kat MarchÃ¡n",
    "email": "kzm@sykosomatic.org"
  },
  "bugs": {
    "url": "https://github.com/zkat/genfun/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Fast, prototype-friendly multimethods.",
  "devDependencies": {
    "mocha": "^3.2.0",
    "nyc": "^10.2.0",
    "standard": "^10.0.2",
    "standard-version": "^4.0.0",
    "weallbehave": "^1.0.3",
    "weallcontribute": "^1.0.8"
  },
  "files": [
    "lib/*.js"
  ],
  "homepage": "http://github.com/zkat/genfun",
  "keywords": [
    "clos",
    "functional",
    "oop",
    "util",
    "object oriented",
    "prototypes",
    "multimethod",
    "generic functions",
    "multiple dispatch",
    "polymorphism",
    "polymorphic",
    "protocols"
  ],
  "license": "MIT",
  "main": "lib/genfun.js",
  "name": "genfun",
  "optionalDependencies": {},
  "readme": "# Genfun [![Travis](https://img.shields.io/travis/zkat/genfun.svg)](https://travis-ci.org/zkat/genfun) [![npm](https://img.shields.io/npm/v/genfun.svg)](https://npm.im/genfun) [![npm](https://img.shields.io/npm/l/genfun.svg)](https://npm.im/genfun)\n\n[`genfun`](https://github.com/zkat/genfun) is a Javascript library that lets you\ndefine generic functions: regular-seeming functions that can be invoked just\nlike any other function, but that automatically dispatch methods based on the\ncombination of arguments passed to it when it's called, also known as multiple\ndispatch.\n\nIt was inspired by [Slate](http://slatelanguage.org/),\n[CLOS](http://en.wikipedia.org/wiki/CLOS) and\n[Sheeple](http://github.com/zkat/sheeple).\n\n## Install\n\n`$ npm install genfun`\n\n## Table of Contents\n\n* [Example](#example)\n* [API](#api)\n  * [`Genfun()`](#genfun)\n  * [`gf.add()`](#addMethod)\n  * [`Genfun.callNextMethod()`](#callNextMethod)\n  * [`Genfun.noApplicableMethod()`](#noApplicableMethod)\n* [Performance](#performance)\n\n### Example\n\nVarious examples are available to look at in the examples/ folder included in\nthis project. Most examples are also runnable by just invoking them with node.\n\n```javascript\nimport Genfun from \"genfun\"\n\nclass Person {}\nclass Dog {}\n\nconst frobnicate = Genfun()\n\nfrobnicate.add([Person], (person) => {\n  console.log('Got a person!')\n})\n\nfrobnicate.add([Dog], (dog) => {\n  console.log('Got a dog!')\n})\n\nfrobnicate.add([String, Person, Dog], (greeting, person, dog) => {\n  console.log(person, ' greets ', dog, ', \\'' + greeting + '\\'')\n})\n\nconst person = new Person()\nconst dog = new Dog()\n\nfrobnicate(person) // Got a person!\nfrobnicate(dog) // Got a dog!\nfrobnicate('Hi, dog!', person, dog); // {} greets {}, 'Hi, dog!'\n```\n\n### API\n\nThe basic API for `Genfun` is fairly simple: You create a new `genfun` by\ncalling `Genfun()`, and add methods to them. Then you call the `genfun` object\nlike a regular function, and it takes care of dispatching the appropriate\nmethods!\n\n#### `Genfun()`\n\nTakes no arguments. Simply creates a new `genfun`. A `genfun` is a regular\nfunction object with overriden function call/dispatch behavior.\n\nWhen called, it will look at its arguments and determine if a matching method\nhas been defined that applies to **all** arguments passed in, considered\ntogether.\n\nNew methods may be added to the `genfun` object with [`gf.add()`](#addMethod).\n\nIf no method is found, or none has been defined, it will invoke\n[`Genfun.noApplicableMethod`](#noApplicableMethod) with the appropriate\narguments.\n\nGenfuns preserve the value of `this` if invoked using `.call` or `.apply`.\n\n##### Example\n\n```javascript\nvar gf = Genfun()\n\n//... add some methods ..\n\n// These calls are all identical.\ngf(1, 2, 3)\ngf.call(null, 1, 2, 3)\ngf.apply(null, [1, 2, 3])\n```\n\n#### <a name=\"addMethod\"></a> `gf.add(<selector>, <body>)`\n\nAdds a new method to `gf` and returns `gf` to allow chaining multiple `add`s.\n\n`<selector>` must be an array of objects that will receive new `Role`s (dispatch\npositions) for the method. If an object in the selector is a function, its\n`.prototype` field will receive the new `Role`. The array must not contain any\nfrozen objects.\n\nWhen a `genfun` is called (like a function), it will look at its set of added\nmethods and, based on the `Role`s assigned, and corresponding prototype chains,\nwill determine which method, if any, will be invoked. On invocation, a method's\n`<body>` argument will be the called with the arguments passed to the `genfun`,\nincluding its `this` and `arguments` values`.\n\nWithin the `<body>`, [`Genfun.callNextMethod`](#callNextMethod) may be called.\n\n##### Example\n\n```javascript\n\nvar numStr = Genfun()\n\nnumStr.add([String, Number], function (str, num) {\n  console.log('got a str:', str, 'and a num: ', num)\n})\n\nnumStr.add([Number, String], function (num, str) {\n  console.log('got a num:', num, 'and a str:', str)\n})\n\n```\n\n#### <a name=\"callNextMethod\"></a> `Genfun.callNextMethod([...<arguments>])`\n\n**NOTE**: This function can only be called synchronously. To call it\nasynchronously (for example, in a `Promise` or in a callback), use\n[`getContext`](#getContext)\n\nCalls the \"next\" applicable method in the method chain. Can only be called\nwithin the body of a method.\n\nIf no arguments are given, `callNextMethod` will pass the current method's\noriginal arguments to the next method.\n\nIf arguments are passed to `callNextMethod`, it will invoke the next applicable\nmethod (based on the **original** method list calculation), with **the given\narguments**, even if they would otherwise not have triggered that method.\n\nReturns whatever value the next method returns.\n\nThere **must** be a next method available when invoked. This function **will\nnot** call `noApplicableMethod` when it runs out of methods to call. It will\ninstead throw an error.\n\n##### Example\n\n```javascript\nclass Foo {}\nclass Bar extends Foo {}\n\nvar cnm = Genfun()\n\ncnm.add([Foo], function (foo) {\n  console.log('calling the method on Foo with', foo)\n  return foo\n})\n\ncnm.add([Bar], function (bar) {\n  console.log('calling the method on Bar with', bar)\n  return Genfun.callNextMethod('some other value!')\n})\n\ncnm(new Bar())\n// calling the method on Bar with {}\n// calling the method on Foo with \"some other value!\"\n// => 'some other value!'\n```\n\n#### <a name=\"getContext\"></a> `Genfun.getContext()`\n\nThe `context` returned by this function will have a `callNextMethod` method\nwhich can be used to invoke the correct next method even during asynchronous\ncalls (for example, when used in a callback or a `Promise`).\n\nThis function must be called synchronously within the body of the method before\nany asynchronous calls, and will error if invoked outside the context of a\nmethod call.\n\n##### Example\n\n```javascript\nsomeGenfun.add([MyThing], function (thing) {\n  const ctx = Genfun.getContext()\n  return somePromisedCall(thing).then(res => ctx.callNextMethod(res))\n})\n```\n\n#### <a name=\"noApplicableMethod\"></a> `Genfun.noApplicableMethod(<gf>, <this>, <args>)`\n\n`Genfun.noApplicableMethod` is a `genfun` itself, which is called whenever **any `genfun`** fails to find a matching method for its given arguments.\n\nIt will be called with the `genfun` as its first argument, then the `this`\nvalue, and then the arguments it was called with.\n\nBy default, this will simply throw a NoApplicableMethod error.\n\nUsers may override this behavior for particular `genfun` and `this`\ncombinations, although `args` will always be an `Array`. The value returned from\nthe dispatched `noApplicableMethod` method will be returned by `genfun` as if it\nhad been its original method. Comparable to [Ruby's\n`method_missing`](http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing).\n\n### Performance\n\n`Genfun` pulls a few caching tricks to make sure dispatch, specially for common\ncases, is as fast as possible.\n\nHow fast? Well, not much slower than native methods:\n\n```\nRegular function: 30.402ms\nNative method: 28.109ms\nSingly-dispatched genfun: 64.467ms\nDouble-dispatched genfun: 70.052ms\nDouble-dispatched genfun with string primitive: 76.742ms\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/zkat/genfun.git"
  },
  "scripts": {
    "postrelease": "npm publish && git push --follow-tags",
    "prerelease": "npm t",
    "pretest": "standard lib",
    "release": "standard-version -s",
    "test": "nyc -- mocha --reporter spec",
    "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
    "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
  },
  "version": "5.0.0"
}
