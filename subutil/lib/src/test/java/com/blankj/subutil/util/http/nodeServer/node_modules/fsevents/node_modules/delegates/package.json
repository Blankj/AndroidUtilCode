{
  "_from": "delegates@^1.0.0",
  "_id": "delegates@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o=",
  "_location": "/fsevents/delegates",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "delegates@^1.0.0",
    "name": "delegates",
    "escapedName": "delegates",
    "rawSpec": "^1.0.0",
    "saveSpec": null,
    "fetchSpec": "^1.0.0"
  },
  "_requiredBy": [
    "/fsevents/are-we-there-yet"
  ],
  "_resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
  "_shasum": "84c6e159b81904fdca59a0ef44cd870d31250f9a",
  "_shrinkwrap": null,
  "_spec": "delegates@^1.0.0",
  "_where": "/Users/pdunkel1/Office/fsevents/fsevents/node_modules/are-we-there-yet",
  "bugs": {
    "url": "https://github.com/visionmedia/node-delegates/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "delegate methods and accessors to another property",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "homepage": "https://github.com/visionmedia/node-delegates#readme",
  "keywords": [
    "delegate",
    "delegation"
  ],
  "license": "MIT",
  "name": "delegates",
  "optionalDependencies": {},
  "readme": "\n# delegates\n\n  Node method and accessor delegation utilty.\n\n## Installation\n\n```\n$ npm install delegates\n```\n\n## Example\n\n```js\nvar delegate = require('delegates');\n\n...\n\ndelegate(proto, 'request')\n  .method('acceptsLanguages')\n  .method('acceptsEncodings')\n  .method('acceptsCharsets')\n  .method('accepts')\n  .method('is')\n  .access('querystring')\n  .access('idempotent')\n  .access('socket')\n  .access('length')\n  .access('query')\n  .access('search')\n  .access('status')\n  .access('method')\n  .access('path')\n  .access('body')\n  .access('host')\n  .access('url')\n  .getter('subdomains')\n  .getter('protocol')\n  .getter('header')\n  .getter('stale')\n  .getter('fresh')\n  .getter('secure')\n  .getter('ips')\n  .getter('ip')\n```\n\n# API\n\n## Delegate(proto, prop)\n\nCreates a delegator instance used to configure using the `prop` on the given\n`proto` object. (which is usually a prototype)\n\n## Delegate#method(name)\n\nAllows the given method `name` to be accessed on the host.\n\n## Delegate#getter(name)\n\nCreates a \"getter\" for the property with the given `name` on the delegated\nobject.\n\n## Delegate#setter(name)\n\nCreates a \"setter\" for the property with the given `name` on the delegated\nobject.\n\n## Delegate#access(name)\n\nCreates an \"accessor\" (ie: both getter *and* setter) for the property with the\ngiven `name` on the delegated object.\n\n## Delegate#fluent(name)\n\nA unique type of \"accessor\" that works for a \"fluent\" API. When called as a\ngetter, the method returns the expected value. However, if the method is called\nwith a value, it will return itself so it can be chained. For example:\n\n```js\ndelegate(proto, 'request')\n  .fluent('query')\n\n// getter\nvar q = request.query();\n\n// setter (chainable)\nrequest\n  .query({ a: 1 })\n  .query({ b: 2 });\n```\n\n# License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/visionmedia/node-delegates.git"
  },
  "version": "1.0.0"
}
