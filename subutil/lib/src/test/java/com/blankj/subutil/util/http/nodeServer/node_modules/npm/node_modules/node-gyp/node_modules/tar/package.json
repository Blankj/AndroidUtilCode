{
  "_from": "tar@^2.0.0",
  "_id": "tar@2.2.1",
  "_inBundle": false,
  "_integrity": "sha1-jk0qJWwOIYXGsYrWlK7JaLg8sdE=",
  "_location": "/npm/node-gyp/tar",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "tar@^2.0.0",
    "name": "tar",
    "escapedName": "tar",
    "rawSpec": "^2.0.0",
    "saveSpec": null,
    "fetchSpec": "^2.0.0"
  },
  "_requiredBy": [
    "/npm/node-gyp"
  ],
  "_resolved": "https://registry.npmjs.org/tar/-/tar-2.2.1.tgz",
  "_shasum": "8e4d2a256c0e2185c6b18ad694aec968b83cb1d1",
  "_shrinkwrap": null,
  "_spec": "tar@^2.0.0",
  "_where": "/Users/rebecca/code/npm/node_modules/node-gyp",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/node-tar/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "block-stream": "*",
    "fstream": "^1.0.2",
    "inherits": "2"
  },
  "deprecated": false,
  "description": "tar for node",
  "devDependencies": {
    "graceful-fs": "^4.1.2",
    "mkdirp": "^0.5.0",
    "rimraf": "1.x",
    "tap": "0.x"
  },
  "homepage": "https://github.com/isaacs/node-tar#readme",
  "license": "ISC",
  "main": "tar.js",
  "name": "tar",
  "optionalDependencies": {},
  "readme": "# node-tar\n\nTar for Node.js.\n\n[![NPM](https://nodei.co/npm/tar.png)](https://nodei.co/npm/tar/)\n\n## API\n\nSee `examples/` for usage examples.\n\n### var tar = require('tar')\n\nReturns an object with `.Pack`, `.Extract` and `.Parse` methods.\n\n### tar.Pack([properties])\n\nReturns a through stream. Use\n[fstream](https://npmjs.org/package/fstream) to write files into the\npack stream and you will receive tar archive data from the pack\nstream.\n\nThis only works with directories, it does not work with individual files.\n\nThe optional `properties` object are used to set properties in the tar\n'Global Extended Header'. If the `fromBase` property is set to true,\nthe tar will contain files relative to the path passed, and not with\nthe path included.\n\n### tar.Extract([options])\n\nReturns a through stream. Write tar data to the stream and the files\nin the tarball will be extracted onto the filesystem.\n\n`options` can be:\n\n```js\n{\n  path: '/path/to/extract/tar/into',\n  strip: 0, // how many path segments to strip from the root when extracting\n}\n```\n\n`options` also get passed to the `fstream.Writer` instance that `tar`\nuses internally.\n\n### tar.Parse()\n\nReturns a writable stream. Write tar data to it and it will emit\n`entry` events for each entry parsed from the tarball. This is used by\n`tar.Extract`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/node-tar.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "2.2.1"
}
