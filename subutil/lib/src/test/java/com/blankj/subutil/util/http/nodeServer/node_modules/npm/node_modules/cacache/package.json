{
  "_from": "cacache@11.3.2",
  "_id": "cacache@11.3.2",
  "_inBundle": false,
  "_integrity": "sha512-E0zP4EPGDOaT2chM08Als91eYnf8Z+eH1awwwVsngUmgppfM5jjJ8l3z5vO5p5w/I3LsiXawb1sW0VY65pQABg==",
  "_location": "/npm/cacache",
  "_phantomChildren": {
    "unique-slug": "2.0.0"
  },
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "cacache@11.3.2",
    "name": "cacache",
    "escapedName": "cacache",
    "rawSpec": "11.3.2",
    "saveSpec": null,
    "fetchSpec": "11.3.2"
  },
  "_requiredBy": [
    "/npm",
    "/npm/make-fetch-happen",
    "/npm/pacote"
  ],
  "_resolved": "https://registry.npmjs.org/cacache/-/cacache-11.3.2.tgz",
  "_shasum": "2d81e308e3d258ca38125b676b98b2ac9ce69bfa",
  "_shrinkwrap": null,
  "_spec": "cacache@11.3.2",
  "_where": "/Users/aeschright/code/cli",
  "author": {
    "name": "Kat March√°n",
    "email": "kzm@sykosomatic.org"
  },
  "bugs": {
    "url": "https://github.com/zkat/cacache/issues"
  },
  "bundleDependencies": false,
  "cache-version": {
    "content": "2",
    "index": "5"
  },
  "config": {
    "nyc": {
      "exclude": [
        "node_modules/**",
        "test/**"
      ]
    }
  },
  "contributors": [
    {
      "name": "Charlotte Spencer",
      "email": "charlottelaspencer@gmail.com"
    },
    {
      "name": "Rebecca Turner",
      "email": "me@re-becca.org"
    }
  ],
  "dependencies": {
    "bluebird": "^3.5.3",
    "chownr": "^1.1.1",
    "figgy-pudding": "^3.5.1",
    "glob": "^7.1.3",
    "graceful-fs": "^4.1.15",
    "lru-cache": "^5.1.1",
    "mississippi": "^3.0.0",
    "mkdirp": "^0.5.1",
    "move-concurrently": "^1.0.1",
    "promise-inflight": "^1.0.1",
    "rimraf": "^2.6.2",
    "ssri": "^6.0.1",
    "unique-filename": "^1.1.1",
    "y18n": "^4.0.0"
  },
  "deprecated": false,
  "description": "Fast, fault-tolerant, cross-platform, disk-based, data-agnostic, content-addressable cache.",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "chalk": "^2.3.2",
    "cross-env": "^5.1.4",
    "require-inject": "^1.4.2",
    "standard": "^11.0.1",
    "standard-version": "^4.4.0",
    "tacks": "^1.2.7",
    "tap": "^12.1.1",
    "weallbehave": "^1.2.0",
    "weallcontribute": "^1.0.8"
  },
  "files": [
    "*.js",
    "lib",
    "locales"
  ],
  "homepage": "https://github.com/zkat/cacache#readme",
  "keywords": [
    "cache",
    "caching",
    "content-addressable",
    "sri",
    "sri hash",
    "subresource integrity",
    "cache",
    "storage",
    "store",
    "file store",
    "filesystem",
    "disk cache",
    "disk storage"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "cacache",
  "optionalDependencies": {},
  "readme": "# cacache [![npm version](https://img.shields.io/npm/v/cacache.svg)](https://npm.im/cacache) [![license](https://img.shields.io/npm/l/cacache.svg)](https://npm.im/cacache) [![Travis](https://img.shields.io/travis/zkat/cacache.svg)](https://travis-ci.org/zkat/cacache) [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/zkat/cacache?svg=true)](https://ci.appveyor.com/project/zkat/cacache) [![Coverage Status](https://coveralls.io/repos/github/zkat/cacache/badge.svg?branch=latest)](https://coveralls.io/github/zkat/cacache?branch=latest)\n\n[`cacache`](https://github.com/zkat/cacache) es una librer√≠a de Node.js para\nmanejar caches locales en disco, con acceso tanto con claves √∫nicas como\ndirecciones de contenido (hashes/hacheos). Es s√∫per r√°pida, excelente con el\nacceso concurrente, y jam√°s te dar√° datos incorrectos, a√∫n si se corrompen o\nmanipulan directamente los ficheros del cache.\n\nEl prop√≥sito original era reemplazar el cach√© local de\n[npm](https://npm.im/npm), pero se puede usar por su propia cuenta.\n\n_Traducciones: [English](README.md)_\n\n## Instalaci√≥n\n\n`$ npm install --save cacache`\n\n## √çndice\n\n* [Ejemplo](#ejemplo)\n* [Caracter√≠sticas](#caracter√≠sticas)\n* [C√≥mo Contribuir](#c√≥mo-contribuir)\n* [API](#api)\n  * [Usando el API en espa√±ol](#localized-api)\n  * Leer\n    * [`ls`](#ls)\n    * [`ls.flujo`](#ls-stream)\n    * [`saca`](#get-data)\n    * [`saca.flujo`](#get-stream)\n    * [`saca.info`](#get-info)\n    * [`saca.tieneDatos`](#get-hasContent)\n  * Escribir\n    * [`mete`](#put-data)\n    * [`mete.flujo`](#put-stream)\n    * [opciones para `mete*`](#put-options)\n    * [`rm.todo`](#rm-all)\n    * [`rm.entrada`](#rm-entry)\n    * [`rm.datos`](#rm-content)\n  * Utilidades\n    * [`ponLenguaje`](#set-locale)\n    * [`limpiaMemoizado`](#clear-memoized)\n    * [`tmp.hazdir`](#tmp-mkdir)\n    * [`tmp.conTmp`](#with-tmp)\n  * Integridad\n    * [Subresource Integrity](#integrity)\n    * [`verifica`](#verify)\n    * [`verifica.ultimaVez`](#verify-last-run)\n\n### Ejemplo\n\n```javascript\nconst cacache = require('cacache/es')\nconst fs = require('fs')\n\nconst tarbol = '/ruta/a/mi-tar.tgz'\nconst rutaCache = '/tmp/my-toy-cache'\nconst clave = 'mi-clave-√∫nica-1234'\n\n// ¬°A√±√°delo al cach√©! Usa `rutaCache` como ra√≠z del cach√©.\ncacache.mete(rutaCache, clave, '10293801983029384').then(integrity => {\n  console.log(`Saved content to ${rutaCache}.`)\n})\n\nconst destino = '/tmp/mytar.tgz'\n\n// Copia el contenido del cach√© a otro fichero, pero esta vez con flujos.\ncacache.saca.flujo(\n  rutaCache, clave\n).pipe(\n  fs.createWriteStream(destino)\n).on('finish', () => {\n  console.log('extracci√≥n completada')\n})\n\n// La misma cosa, pero accesando el contenido directamente, sin tocar el √≠ndice.\ncacache.saca.porHacheo(rutaCache, integridad).then(datos => {\n  fs.writeFile(destino, datos, err => {\n    console.log('datos del tarbol sacados basado en su sha512, y escrito a otro fichero')\n  })\n})\n```\n\n### Caracter√≠sticas\n\n* Extracci√≥n por clave o por direcci√≥n de contenido (shasum, etc)\n* Usa el est√°ndard de web, [Subresource Integrity](#integrity)\n* Compatible con multiples algoritmos - usa sha1, sha512, etc, en el mismo cach√© sin problema\n* Entradas con contenido id√©ntico comparten ficheros\n* Tolerancia de fallas (inmune a corrupci√≥n, ficheros parciales, carreras de proceso, etc)\n* Verificaci√≥n completa de datos cuando (escribiendo y leyendo)\n* Concurrencia r√°pida, segura y \"lockless\"\n* Compatible con `stream`s (flujos)\n* Compatible con `Promise`s (promesas)\n* Bastante r√°pida -- acceso, incluyendo verificaci√≥n, en microsegundos\n* Almacenaje de metadatos arbitrarios\n* Colecci√≥n de basura y verificaci√≥n adicional fuera de banda\n* Cobertura rigurosa de pruebas\n* Probablente hay un \"Bloom filter\" por ah√≠ en alg√∫n lado. Eso le mola a la gente, ¬øVerdad? ü§î\n\n### C√≥mo Contribuir\n\nEl equipo de cacache felizmente acepta contribuciones de c√≥digo y otras maneras de participaci√≥n. ¬°Hay muchas formas diferentes de contribuir! La [Gu√≠a de Colaboradores](CONTRIBUTING.md) (en ingl√©s) tiene toda la informaci√≥n que necesitas para cualquier tipo de contribuci√≥n: todo desde c√≥mo reportar errores hasta c√≥mo someter parches con nuevas caracter√≠sticas. Con todo y eso, no se preocupe por si lo que haces est√° ex√°ctamente correcto: no hay ning√∫n problema en hacer preguntas si algo no est√° claro, o no lo encuentras.\n\nEl equipo de cacache tiene miembros hispanohablantes: es completamente aceptable crear `issues` y `pull requests` en espa√±ol/castellano.\n\nTodos los participantes en este proyecto deben obedecer el [C√≥digo de Conducta](CODE_OF_CONDUCT.md) (en ingl√©s), y en general actuar de forma amable y respetuosa mientras participan en esta comunidad.\n\nPor favor refi√©rase al [Historial de Cambios](CHANGELOG.md) (en ingl√©s) para detalles sobre cambios importantes inclu√≠dos en cada versi√≥n.\n\nFinalmente, cacache tiene un sistema de localizaci√≥n de lenguaje. Si te interesa a√±adir lenguajes o mejorar los que existen, mira en el directorio `./locales` para comenzar.\n\nHappy hacking!\n\n### API\n\n#### <a name=\"localized-api\"></a> Usando el API en espa√±ol\n\ncacache incluye una traducci√≥n completa de su API al castellano, con las mismas\ncaracter√≠sticas. Para usar el API como est√° documentado en este documento, usa\n`require('cacache/es')`\n\ncacache tambi√©n tiene otros lenguajes: encu√©ntralos bajo `./locales`, y podr√°s\nusar el API en ese lenguaje con `require('cacache/<lenguaje>')`\n\n#### <a name=\"ls\"></a> `> cacache.ls(cache) -> Promise<Object>`\n\nEnumera todas las entradas en el cach√©, dentro de un solo objeto. Cada entrada\nen el objeto tendr√° como clave la clave √∫nica usada para el √≠ndice, el valor\nsiendo un objeto de [`saca.info`](#get-info).\n\n##### Ejemplo\n\n```javascript\ncacache.ls(rutaCache).then(console.log)\n// Salida\n{\n  'my-thing': {\n    key: 'my-thing',\n    integrity: 'sha512-BaSe64/EnCoDED+HAsh=='\n    path: '.testcache/content/deadbeef', // unido con `rutaCache`\n    time: 12345698490,\n    size: 4023948,\n    metadata: {\n      name: 'blah',\n      version: '1.2.3',\n      description: 'this was once a package but now it is my-thing'\n    }\n  },\n  'other-thing': {\n    key: 'other-thing',\n    integrity: 'sha1-ANothER+hasH=',\n    path: '.testcache/content/bada55',\n    time: 11992309289,\n    size: 111112\n  }\n}\n```\n\n#### <a name=\"ls-stream\"></a> `> cacache.ls.flujo(cache) -> Readable`\n\nEnumera todas las entradas en el cach√©, emitiendo un objeto de\n[`saca.info`](#get-info) por cada evento de `data` en el flujo.\n\n##### Ejemplo\n\n```javascript\ncacache.ls.flujo(rutaCache).on('data', console.log)\n// Salida\n{\n  key: 'my-thing',\n  integrity: 'sha512-BaSe64HaSh',\n  path: '.testcache/content/deadbeef', // unido con `rutaCache`\n  time: 12345698490,\n  size: 13423,\n  metadata: {\n    name: 'blah',\n    version: '1.2.3',\n    description: 'this was once a package but now it is my-thing'\n  }\n}\n\n{\n  key: 'other-thing',\n  integrity: 'whirlpool-WoWSoMuchSupport',\n  path: '.testcache/content/bada55',\n  time: 11992309289,\n  size: 498023984029\n}\n\n{\n  ...\n}\n```\n\n#### <a name=\"get-data\"></a> `> cacache.saca(cache, clave, [ops]) -> Promise({data, metadata, integrity})`\n\nDevuelve un objeto con los datos, hacheo de integridad y metadatos identificados\npor la `clave`. La propiedad `data` de este objeto ser√° una instancia de\n`Buffer` con los datos almacenados en el cach√©. to do with it! cacache just\nwon't care.\n\n`integrity` es un `string` de [Subresource Integrity](#integrity). D√≠gase, un\n`string` que puede ser usado para verificar a la `data`, que tiene como formato\n`<algoritmo>-<hacheo-integridad-base64>`.\n\nSo no existe ninguna entrada identificada por `clave`, o se los datos\nalmacenados localmente fallan verificaci√≥n, el `Promise` fallar√°.\n\nUna sub-funci√≥n, `saca.porHacheo`, tiene casi el mismo comportamiento, excepto\nque busca entradas usando el hacheo de integridad, sin tocar el √≠ndice general.\nEsta versi√≥n *s√≥lo* devuelve `data`, sin ning√∫n objeto conteni√©ndola.\n\n##### Nota\n\nEsta funci√≥n lee la entrada completa a la memoria antes de devolverla. Si est√°s\nalmacenando datos Muy Grandes, es posible que [`saca.flujo`](#get-stream) sea\nuna mejor soluci√≥n.\n\n##### Ejemplo\n\n```javascript\n// Busca por clave\ncache.saca(rutaCache, 'my-thing').then(console.log)\n// Salida:\n{\n  metadata: {\n    thingName: 'my'\n  },\n  integrity: 'sha512-BaSe64HaSh',\n  data: Buffer#<deadbeef>,\n  size: 9320\n}\n\n// Busca por hacheo\ncache.saca.porHacheo(rutaCache, 'sha512-BaSe64HaSh').then(console.log)\n// Salida:\nBuffer#<deadbeef>\n```\n\n#### <a name=\"get-stream\"></a> `> cacache.saca.flujo(cache, clave, [ops]) -> Readable`\n\nDevuelve un [Readable\nStream](https://nodejs.org/api/stream.html#stream_readable_streams) de los datos\nalmacenados bajo `clave`.\n\nSo no existe ninguna entrada identificada por `clave`, o se los datos\nalmacenados localmente fallan verificaci√≥n, el `Promise` fallar√°.\n\n`metadata` y `integrity` ser√°n emitidos como eventos antes de que el flujo\ncierre.\n\nUna sub-funci√≥n, `saca.flujo.porHacheo`, tiene casi el mismo comportamiento,\nexcepto que busca entradas usando el hacheo de integridad, sin tocar el √≠ndice\ngeneral. Esta versi√≥n no emite eventos de `metadata` o `integrity`.\n\n##### Ejemplo\n\n```javascript\n// Busca por clave\ncache.saca.flujo(\n  rutaCache, 'my-thing'\n).on('metadata', metadata => {\n  console.log('metadata:', metadata)\n}).on('integrity', integrity => {\n  console.log('integrity:', integrity)\n}).pipe(\n  fs.createWriteStream('./x.tgz')\n)\n// Salidas:\nmetadata: { ... }\nintegrity: 'sha512-SoMeDIGest+64=='\n\n// Busca por hacheo\ncache.saca.flujo.porHacheo(\n  rutaCache, 'sha512-SoMeDIGest+64=='\n).pipe(\n  fs.createWriteStream('./x.tgz')\n)\n```\n\n#### <a name=\"get-info\"></a> `> cacache.saca.info(cache, clave) -> Promise`\n\nBusca la `clave` en el √≠ndice del cach√©, devolviendo informaci√≥n sobre la\nentrada si existe.\n\n##### Campos\n\n* `key` - Clave de la entrada. Igual al argumento `clave`.\n* `integrity` - [hacheo de Subresource Integrity](#integrity) del contenido al que se refiere esta entrada.\n* `path` - Direcci√≥n del fichero de datos almacenados, relativa al argumento `cache`.\n* `time` - Hora de creaci√≥n de la entrada\n* `metadata` - Metadatos asignados a esta entrada por el usuario\n\n##### Ejemplo\n\n```javascript\ncacache.saca.info(rutaCache, 'my-thing').then(console.log)\n\n// Salida\n{\n  key: 'my-thing',\n  integrity: 'sha256-MUSTVERIFY+ALL/THINGS=='\n  path: '.testcache/content/deadbeef',\n  time: 12345698490,\n  size: 849234,\n  metadata: {\n    name: 'blah',\n    version: '1.2.3',\n    description: 'this was once a package but now it is my-thing'\n  }\n}\n```\n\n#### <a name=\"get-hasContent\"></a> `> cacache.saca.tieneDatos(cache, integrity) -> Promise`\n\nBusca un [hacheo Subresource Integrity](#integrity) en el cach√©. Si existe el\ncontenido asociado con `integrity`, devuelve un objeto con dos campos: el hacheo\n_espec√≠fico_ que se us√≥ para la b√∫squeda, `sri`, y el tama√±o total del\ncontenido, `size`. Si no existe ning√∫n contenido asociado con `integrity`,\ndevuelve `false`.\n\n##### Ejemplo\n\n```javascript\ncacache.saca.tieneDatos(rutaCache, 'sha256-MUSTVERIFY+ALL/THINGS==').then(console.log)\n\n// Salida\n{\n  sri: {\n    source: 'sha256-MUSTVERIFY+ALL/THINGS==',\n    algorithm: 'sha256',\n    digest: 'MUSTVERIFY+ALL/THINGS==',\n    options: []\n  },\n  size: 9001\n}\n\ncacache.saca.tieneDatos(rutaCache, 'sha521-NOT+IN/CACHE==').then(console.log)\n\n// Salida\nfalse\n```\n\n#### <a name=\"put-data\"></a> `> cacache.mete(cache, clave, datos, [ops]) -> Promise`\n\nInserta `datos` en el cach√©. El `Promise` devuelto se resuelve con un hacheo\n(generado conforme a [`ops.algorithms`](#optsalgorithms)) despu√©s que la entrada\nhaya sido escrita en completo.\n\n##### Ejemplo\n\n```javascript\nfetch(\n  'https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz'\n).then(datos => {\n  return cacache.mete(rutaCache, 'registry.npmjs.org|cacache@1.0.0', datos)\n}).then(integridad => {\n  console.log('el hacheo de integridad es', integridad)\n})\n```\n\n#### <a name=\"put-stream\"></a> `> cacache.mete.flujo(cache, clave, [ops]) -> Writable`\n\nDevuelve un [Writable\nStream](https://nodejs.org/api/stream.html#stream_writable_streams) que inserta\nal cach√© los datos escritos a √©l. Emite un evento `integrity` con el hacheo del\ncontenido escrito, cuando completa.\n\n##### Ejemplo\n\n```javascript\nrequest.get(\n  'https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz'\n).pipe(\n  cacache.mete.flujo(\n    rutaCache, 'registry.npmjs.org|cacache@1.0.0'\n  ).on('integrity', d => console.log(`integrity digest is ${d}`))\n)\n```\n\n#### <a name=\"put-options\"></a> `> opciones para cacache.mete`\n\nLa funciones `cacache.mete` tienen un n√∫mero de opciones en com√∫n.\n\n##### `ops.metadata`\n\nMetadatos del usuario que se almacenar√°n con la entrada.\n\n##### `ops.size`\n\nEl tama√±o declarado de los datos que se van a insertar. Si es prove√≠do, cacache\nverificar√° que los datos escritos sean de ese tama√±o, o si no, fallar√° con un\nerror con c√≥digo `EBADSIZE`.\n\n##### `ops.integrity`\n\nEl hacheo de integridad de los datos siendo escritos.\n\nSi es prove√≠do, y los datos escritos no le corresponden, la operaci√≥n fallar√°\ncon un error con c√≥digo `EINTEGRITY`.\n\n`ops.algorithms` no tiene ning√∫n efecto si esta opci√≥n est√° presente.\n\n##### `ops.algorithms`\n\nPor Defecto: `['sha512']`\n\nAlgoritmos que se deben usar cuando se calcule el hacheo de [subresource\nintegrity](#integrity) para los datos insertados. Puede usar cualquier algoritmo\nenumerado en `crypto.getHashes()`.\n\nPor el momento, s√≥lo se acepta un algoritmo (d√≠gase, un array con ex√°ctamente un\nvalor). No tiene ning√∫n efecto si `ops.integrity` tambi√©n ha sido proveido.\n\n##### `ops.uid`/`ops.gid`\n\nSi est√°n presentes, cacache har√° todo lo posible para asegurarse que todos los\nficheros creados en el proceso de sus operaciones en el cach√© usen esta\ncombinaci√≥n en particular.\n\n##### `ops.memoize`\n\nPor Defecto: `null`\n\nSi es verdad, cacache tratar√° de memoizar los datos de la entrada en memoria. La\npr√≥xima vez que el proceso corriente trate de accesar los datos o entrada,\ncacache buscar√° en memoria antes de buscar en disco.\n\nSi `ops.memoize` es un objeto regular o un objeto como `Map` (es decir, un\nobjeto con m√©todos `get()` y `set()`), este objeto en s√≠ sera usado en vez del\ncach√© de memoria global. Esto permite tener l√≥gica espec√≠fica a tu aplicaci√≥n\nencuanto al almacenaje en memoria de tus datos.\n\nSi quieres asegurarte que los datos se lean del disco en vez de memoria, usa\n`memoize: false` cuando uses funciones de `cacache.saca`.\n\n#### <a name=\"rm-all\"></a> `> cacache.rm.todo(cache) -> Promise`\n\nBorra el cach√© completo, incluyendo ficheros temporeros, ficheros de datos, y el\n√≠ndice del cach√©.\n\n##### Ejemplo\n\n```javascript\ncacache.rm.todo(rutaCache).then(() => {\n  console.log('THE APOCALYPSE IS UPON US üò±')\n})\n```\n\n#### <a name=\"rm-entry\"></a> `> cacache.rm.entrada(cache, clave) -> Promise`\n\nAlias: `cacache.rm`\n\nBorra la entrada `clave` del √≠nduce. El contenido asociado con esta entrada\nseguir√° siendo accesible por hacheo usando\n[`saca.flujo.porHacheo`](#get-stream).\n\nPara borrar el contenido en s√≠, usa [`rm.datos`](#rm-content). Si quieres hacer\nesto de manera m√°s segura (pues ficheros de contenido pueden ser usados por\nmultiples entradas), usa [`verifica`](#verify) para borrar hu√©rfanos.\n\n##### Ejemplo\n\n```javascript\ncacache.rm.entrada(rutaCache, 'my-thing').then(() => {\n  console.log('I did not like it anyway')\n})\n```\n\n#### <a name=\"rm-content\"></a> `> cacache.rm.datos(cache, integrity) -> Promise`\n\nBorra el contenido identificado por `integrity`. Cualquier entrada que se\nrefiera a este contenido quedar√°n hu√©rfanas y se invalidar√°n si se tratan de\naccesar, al menos que contenido id√©ntico sea a√±adido bajo `integrity`.\n\n##### Ejemplo\n\n```javascript\ncacache.rm.datos(rutaCache, 'sha512-SoMeDIGest/IN+BaSE64==').then(() => {\n  console.log('los datos para `mi-cosa` se borraron')\n})\n```\n\n#### <a name=\"set-locale\"></a> `> cacache.ponLenguaje(locale)`\n\nConfigura el lenguaje usado para mensajes y errores de cacache. La lista de\nlenguajes disponibles est√° en el directorio `./locales` del proyecto.\n\n_Te interesa a√±adir m√°s lenguajes? [Somete un PR](CONTRIBUTING.md)!_\n\n#### <a name=\"clear-memoized\"></a> `> cacache.limpiaMemoizado()`\n\nCompletamente reinicializa el cach√© de memoria interno. Si est√°s usando tu\npropio objecto con `ops.memoize`, debes hacer esto de manera espec√≠fica a √©l.\n\n#### <a name=\"tmp-mkdir\"></a> `> tmp.hazdir(cache, ops) -> Promise<Path>`\n\nAlias: `tmp.mkdir`\n\nDevuelve un directorio √∫nico dentro del directorio `tmp` del cach√©.\n\nUna vez tengas el directorio, es responsabilidad tuya asegurarte que todos los\nficheros escrito a √©l sean creados usando los permisos y `uid`/`gid` concordante\ncon el cach√©. Si no, puedes pedirle a cacache que lo haga llamando a\n[`cacache.tmp.fix()`](#tmp-fix). Esta funci√≥n arreglar√° todos los permisos en el\ndirectorio tmp.\n\nSi quieres que cacache limpie el directorio autom√°ticamente cuando termines, usa\n[`cacache.tmp.conTmp()`](#with-tpm).\n\n##### Ejemplo\n\n```javascript\ncacache.tmp.mkdir(cache).then(dir => {\n  fs.writeFile(path.join(dir, 'blablabla'), Buffer#<1234>, ...)\n})\n```\n\n#### <a name=\"with-tmp\"></a> `> tmp.conTmp(cache, ops, cb) -> Promise`\n\nCrea un directorio temporero con [`tmp.mkdir()`](#tmp-mkdir) y ejecuta `cb` con\n√©l como primer argumento. El directorio creado ser√° removido autom√°ticamente\ncuando el valor devolvido por `cb()` se resuelva.\n\nLas mismas advertencias aplican en cuanto a manejando permisos para los ficheros\ndentro del directorio.\n\n##### Ejemplo\n\n```javascript\ncacache.tmp.conTmp(cache, dir => {\n  return fs.writeFileAsync(path.join(dir, 'blablabla'), Buffer#<1234>, ...)\n}).then(() => {\n  // `dir` no longer exists\n})\n```\n\n#### <a name=\"integrity\"></a> Hacheos de Subresource Integrity\n\ncacache usa strings que siguen la especificaci√≥n de [Subresource Integrity\nspec](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\n\nEs decir, donde quiera cacache espera un argumento o opci√≥n `integrity`, ese\nstring deber√≠a usar el formato `<algoritmo>-<hacheo-base64>`.\n\nUna variaci√≥n importante sobre los hacheos que cacache acepta es que acepta el\nnombre de cualquier algoritmo aceptado por el proceso de Node.js donde se usa.\nPuedes usar `crypto.getHashes()` para ver cuales est√°n disponibles.\n\n##### Generando tus propios hacheos\n\nSi tienes un `shasum`, en general va a estar en formato de string hexadecimal\n(es decir, un `sha1` se ver√≠a como algo as√≠:\n`5f5513f8822fdbe5145af33b64d8d970dcf95c6e`).\n\nPara ser compatible con cacache, necesitas convertir esto a su equivalente en\nsubresource integrity. Por ejemplo, el hacheo correspondiente al ejemplo\nanterior ser√≠a: `sha1-X1UT+IIv2+UUWvM7ZNjZcNz5XG4=`.\n\nPuedes usar c√≥digo as√≠ para generarlo por tu cuenta:\n\n```javascript\nconst crypto = require('crypto')\nconst algoritmo = 'sha512'\nconst datos = 'foobarbaz'\n\nconst integrity = (\n  algorithm +\n  '-' +\n  crypto.createHash(algoritmo).update(datos).digest('base64')\n)\n```\n\nTambi√©n puedes usar [`ssri`](https://npm.im/ssri) para deferir el trabajo a otra\nlibrer√≠a que garantiza que todo est√© correcto, pues maneja probablemente todas\nlas operaciones que tendr√≠as que hacer con SRIs, incluyendo convirtiendo entre\nhexadecimal y el formato SRI.\n\n#### <a name=\"verify\"></a> `> cacache.verifica(cache, ops) -> Promise`\n\nExamina y arregla tu cach√©:\n\n* Limpia entradas inv√°lidas, hu√©rfanas y corrompidas\n* Te deja filtrar cuales entradas retener, con tu propio filtro\n* Reclama cualquier ficheros de contenido sin referencias en el √≠ndice\n* Verifica integridad de todos los ficheros de contenido y remueve los malos\n* Arregla permisos del cach√©\n* Remieve el directorio `tmp` en el cach√©, y todo su contenido.\n\nCuando termine, devuelve un objeto con varias estad√≠sticas sobre el proceso de\nverificaci√≥n, por ejemplo la cantidad de espacio de disco reclamado, el n√∫mero\nde entradas v√°lidas, n√∫mero de entradas removidas, etc.\n\n##### Opciones\n\n* `ops.uid` - uid para asignarle al cach√© y su contenido\n* `ops.gid` - gid para asignarle al cach√© y su contenido\n* `ops.filter` - recibe una entrada como argumento. Devuelve falso para removerla. Nota: es posible que esta funci√≥n sea invocada con la misma entrada m√°s de una vez.\n\n##### Example\n\n```sh\necho somegarbage >> $RUTACACHE/content/deadbeef\n```\n\n```javascript\ncacache.verifica(rutaCache).then(stats => {\n  // deadbeef collected, because of invalid checksum.\n  console.log('cache is much nicer now! stats:', stats)\n})\n```\n\n#### <a name=\"verify-last-run\"></a> `> cacache.verifica.ultimaVez(cache) -> Promise`\n\nAlias: `√∫ltimaVez`\n\nDevuelve un `Date` que representa la √∫ltima vez que `cacache.verifica` fue\nejecutada en `cache`.\n\n##### Example\n\n```javascript\ncacache.verifica(rutaCache).then(() => {\n  cacache.verifica.ultimaVez(rutaCache).then(√∫ltima => {\n    console.log('La √∫ltima vez que se us√≥ cacache.verifica() fue ' + √∫ltima)\n  })\n})\n```\n",
  "readmeFilename": "README.es.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zkat/cacache.git"
  },
  "scripts": {
    "benchmarks": "node test/benchmarks",
    "postrelease": "npm publish && git push --follow-tags",
    "prerelease": "npm t",
    "pretest": "standard",
    "release": "standard-version -s",
    "test": "cross-env CACACHE_UPDATE_LOCALE_FILES=true tap --coverage --nyc-arg=--all -J test/*.js",
    "test-docker": "docker run -it --rm --name pacotest -v \"$PWD\":/tmp -w /tmp node:latest npm test",
    "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
    "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
  },
  "version": "11.3.2"
}
