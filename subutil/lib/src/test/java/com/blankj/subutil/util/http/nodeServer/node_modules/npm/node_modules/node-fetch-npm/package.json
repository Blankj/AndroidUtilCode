{
  "_from": "node-fetch-npm@^2.0.2",
  "_id": "node-fetch-npm@2.0.2",
  "_inBundle": false,
  "_integrity": "sha512-nJIxm1QmAj4v3nfCvEeCrYSoVwXyxLnaPBK5W1W5DGEJwjlKuC2VEUycGw5oxk+4zZahRrB84PUJJgEmhFTDFw==",
  "_location": "/npm/node-fetch-npm",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "node-fetch-npm@^2.0.2",
    "name": "node-fetch-npm",
    "escapedName": "node-fetch-npm",
    "rawSpec": "^2.0.2",
    "saveSpec": null,
    "fetchSpec": "^2.0.2"
  },
  "_requiredBy": [
    "/npm/make-fetch-happen"
  ],
  "_resolved": "https://registry.npmjs.org/node-fetch-npm/-/node-fetch-npm-2.0.2.tgz",
  "_shasum": "7258c9046182dca345b4208eda918daf33697ff7",
  "_shrinkwrap": null,
  "_spec": "node-fetch-npm@^2.0.2",
  "_where": "/Users/rebecca/code/npm/node_modules/make-fetch-happen",
  "author": {
    "name": "David Frank"
  },
  "bugs": {
    "url": "https://github.com/npm/node-fetch-npm/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Rebecca Turner",
      "email": "me@re-becca.org"
    },
    {
      "name": "Kat MarchÃ¡n",
      "email": "kzm@sykosomatic.org"
    }
  ],
  "dependencies": {
    "encoding": "^0.1.11",
    "json-parse-better-errors": "^1.0.0",
    "safe-buffer": "^5.1.1"
  },
  "deprecated": false,
  "description": "An npm cli-oriented fork of the excellent node-fetch",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "chai-iterator": "^1.1.1",
    "chai-string": "^1.4.0",
    "codecov": "^1.0.1",
    "cross-env": "^3.1.4",
    "form-data": "^2.2.0",
    "is-builtin-module": "^1.0.0",
    "mocha": "^3.5.0",
    "nyc": "^10.3.2",
    "parted": "^0.1.1",
    "promise": "^7.3.1",
    "resumer": "0.0.0",
    "standard": "^10.0.3",
    "standard-version": "^4.2.0",
    "weallbehave": "^1.2.0",
    "weallcontribute": "^1.0.8",
    "whatwg-url": "^4.8.0"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "src/*.js"
  ],
  "homepage": "https://github.com/npm/node-fetch-npm",
  "keywords": [
    "fetch",
    "http",
    "promise"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "node-fetch-npm",
  "optionalDependencies": {},
  "readme": "\nnode-fetch-npm\n==============\n\n[![npm version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage status][codecov-image]][codecov-url]\n\nA light-weight module that brings `window.fetch` to Node.js\n\n`node-fetch-npm` is a fork of [`node-fetch`](https://npm.im/node-fetch) used in\nnpm itself, through [`make-fetch-happen`](https://npm.im/make-fetch-happen). It\nhas more regular releases and accepts some patches that would not fit with\n`node-fetch`'s own design goals (such as picking a specific cookie library,\nremoving `babel` dependency altogether, etc).\n\nThis library is *not a replacement* for `node-fetch`, nor does it intend to\nsupplant it. It's purely a fork maintained for the sake of easier patching of\nspecific needs that it wouldn't be fair to shove down the main project's throat.\nThis project will still send patches for shared bugs over and hopefully help\nimprove its \"parent\".\n\n## Motivation\n\nInstead of implementing `XMLHttpRequest` in Node.js to run browser-specific [Fetch polyfill](https://github.com/github/fetch), why not go from native `http` to `fetch` API directly? Hence `node-fetch`, minimal code for a `window.fetch` compatible API on Node.js runtime.\n\nSee Matt Andrews' [isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) for isomorphic usage (exports `node-fetch` for server-side, `whatwg-fetch` for client-side).\n\n\n## Features\n\n- Stay consistent with `window.fetch` API.\n- Make conscious trade-off when following [whatwg fetch spec][whatwg-fetch] and [stream spec](https://streams.spec.whatwg.org/) implementation details, document known difference.\n- Use native promise, but allow substituting it with [insert your favorite promise library].\n- Use native stream for body, on both request and response.\n- Decode content encoding (gzip/deflate) properly, and convert string output (such as `res.text()` and `res.json()`) to UTF-8 automatically.\n- Useful extensions such as timeout, redirect limit, response size limit, [explicit errors][] for troubleshooting.\n\n\n## Difference from client-side fetch\n\n- See [Known Differences](https://github.com/npm/node-fetch-npm/blob/master/LIMITS.md) for details.\n- If you happen to use a missing feature that `window.fetch` offers, feel free to open an issue.\n- Pull requests are welcomed too!\n\n\n## Install\n\n```sh\n$ npm install node-fetch-npm --save\n```\n\n\n## Usage\n\n```javascript\nimport fetch from 'node-fetch';\n// or\n// const fetch = require('node-fetch');\n\n// if you are using your own Promise library, set it through fetch.Promise. Eg.\n\n// import Bluebird from 'bluebird';\n// fetch.Promise = Bluebird;\n\n// plain text or html\n\nfetch('https://github.com/')\n\t.then(res => res.text())\n\t.then(body => console.log(body));\n\n// json\n\nfetch('https://api.github.com/users/github')\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// catching network error\n// 3xx-5xx responses are NOT network errors, and should be handled in then()\n// you only need one catch() at the end of your promise chain\n\nfetch('http://domain.invalid/')\n\t.catch(err => console.error(err));\n\n// stream\n// the node.js way is to use stream when possible\n\nfetch('https://assets-cdn.github.com/images/modules/logos_page/Octocat.png')\n\t.then(res => {\n\t\tconst dest = fs.createWriteStream('./octocat.png');\n\t\tres.body.pipe(dest);\n\t});\n\n// buffer\n// if you prefer to cache binary data in full, use buffer()\n// note that buffer() is a node-fetch only API\n\nimport fileType from 'file-type';\n\nfetch('https://assets-cdn.github.com/images/modules/logos_page/Octocat.png')\n\t.then(res => res.buffer())\n\t.then(buffer => fileType(buffer))\n\t.then(type => { /* ... */ });\n\n// meta\n\nfetch('https://github.com/')\n\t.then(res => {\n\t\tconsole.log(res.ok);\n\t\tconsole.log(res.status);\n\t\tconsole.log(res.statusText);\n\t\tconsole.log(res.headers.raw());\n\t\tconsole.log(res.headers.get('content-type'));\n\t});\n\n// post\n\nfetch('http://httpbin.org/post', { method: 'POST', body: 'a=1' })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with stream from file\n\nimport { createReadStream } from 'fs';\n\nconst stream = createReadStream('input.txt');\nfetch('http://httpbin.org/post', { method: 'POST', body: stream })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with JSON\n\nvar body = { a: 1 };\nfetch('http://httpbin.org/post', {\n\tmethod: 'POST',\n\tbody:    JSON.stringify(body),\n\theaders: { 'Content-Type': 'application/json' },\n})\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with form-data (detect multipart)\n\nimport FormData from 'form-data';\n\nconst form = new FormData();\nform.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: form })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with form-data (custom headers)\n// note that getHeaders() is non-standard API\n\nimport FormData from 'form-data';\n\nconst form = new FormData();\nform.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: form, headers: form.getHeaders() })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// node 7+ with async function\n\n(async function () {\n\tconst res = await fetch('https://api.github.com/users/github');\n\tconst json = await res.json();\n\tconsole.log(json);\n})();\n```\n\nSee [test cases](https://github.com/npm/node-fetch-npm/blob/master/test/test.js) for more examples.\n\n\n## API\n\n### fetch(url[, options])\n\n- `url` A string representing the URL for fetching\n- `options` [Options](#fetch-options) for the HTTP(S) request\n- Returns: <code>Promise&lt;[Response](#class-response)&gt;</code>\n\nPerform an HTTP(S) fetch.\n\n`url` should be an absolute url, such as `http://example.com/`. A path-relative URL (`/file/under/root`) or protocol-relative URL (`//can-be-http-or-https.com/`) will result in a rejected promise.\n\n<a id=\"fetch-options\"></a>\n#### Options\n\nThe default values are shown after each option key.\n\n```js\n{\n\t// These properties are part of the Fetch Standard\n\tmethod: 'GET',\n\theaders: {},        // request headers. format is the identical to that accepted by the Headers constructor (see below)\n\tbody: null,         // request body. can be null, a string, a Buffer, a Blob, or a Node.js Readable stream\n\tredirect: 'follow', // set to `manual` to extract redirect headers, `error` to reject redirect\n\n\t// The following properties are node-fetch-npm extensions\n\tfollow: 20,         // maximum redirect count. 0 to not follow redirect\n\ttimeout: 0,         // req/res timeout in ms, it resets on redirect. 0 to disable (OS limit applies)\n\tcompress: true,     // support gzip/deflate content encoding. false to disable\n\tsize: 0,            // maximum response body size in bytes. 0 to disable\n\tagent: null         // http(s).Agent instance, allows custom proxy, certificate etc.\n}\n```\n\n##### Default Headers\n\nIf no values are set, the following request headers will be sent automatically:\n\nHeader            | Value\n----------------- | --------------------------------------------------------\n`Accept-Encoding` | `gzip,deflate` _(when `options.compress === true`)_\n`Accept`          | `*/*`\n`Connection`      | `close` _(when no `options.agent` is present)_\n`Content-Length`  | _(automatically calculated, if possible)_\n`User-Agent`      | `node-fetch-npm/1.0 (+https://github.com/npm/node-fetch-npm)`\n\n<a id=\"class-request\"></a>\n### Class: Request\n\nAn HTTP(S) request containing information about URL, method, headers, and the body. This class implements the [Body](#iface-body) interface.\n\nDue to the nature of Node.js, the following properties are not implemented at this moment:\n\n- `type`\n- `destination`\n- `referrer`\n- `referrerPolicy`\n- `mode`\n- `credentials`\n- `cache`\n- `integrity`\n- `keepalive`\n\nThe following node-fetch-npm extension properties are provided:\n\n- `follow`\n- `compress`\n- `counter`\n- `agent`\n\nSee [options](#fetch-options) for exact meaning of these extensions.\n\n#### new Request(input[, options])\n\n<small>*(spec-compliant)*</small>\n\n- `input` A string representing a URL, or another `Request` (which will be cloned)\n- `options` [Options][#fetch-options] for the HTTP(S) request\n\nConstructs a new `Request` object. The constructor is identical to that in the [browser](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request).\n\nIn most cases, directly `fetch(url, options)` is simpler than creating a `Request` object.\n\n<a id=\"class-response\"></a>\n### Class: Response\n\nAn HTTP(S) response. This class implements the [Body](#iface-body) interface.\n\nThe following properties are not implemented in node-fetch-npm at this moment:\n\n- `Response.error()`\n- `Response.redirect()`\n- `type`\n- `redirected`\n- `trailer`\n\n#### new Response([body[, options]])\n\n<small>*(spec-compliant)*</small>\n\n- `body` A string or [Readable stream][node-readable]\n- `options` A [`ResponseInit`][response-init] options dictionary\n\nConstructs a new `Response` object. The constructor is identical to that in the [browser](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response).\n\nBecause Node.js does not implement service workers (for which this class was designed), one rarely has to construct a `Response` directly.\n\n<a id=\"class-headers\"></a>\n### Class: Headers\n\nThis class allows manipulating and iterating over a set of HTTP headers. All methods specified in the [Fetch Standard][whatwg-fetch] are implemented.\n\n#### new Headers([init])\n\n<small>*(spec-compliant)*</small>\n\n- `init` Optional argument to pre-fill the `Headers` object\n\nConstruct a new `Headers` object. `init` can be either `null`, a `Headers` object, an key-value map object, or any iterable object.\n\n```js\n// Example adapted from https://fetch.spec.whatwg.org/#example-headers-class\n\nconst meta = {\n  'Content-Type': 'text/xml',\n  'Breaking-Bad': '<3'\n};\nconst headers = new Headers(meta);\n\n// The above is equivalent to\nconst meta = [\n  [ 'Content-Type', 'text/xml' ],\n  [ 'Breaking-Bad', '<3' ]\n];\nconst headers = new Headers(meta);\n\n// You can in fact use any iterable objects, like a Map or even another Headers\nconst meta = new Map();\nmeta.set('Content-Type', 'text/xml');\nmeta.set('Breaking-Bad', '<3');\nconst headers = new Headers(meta);\nconst copyOfHeaders = new Headers(headers);\n```\n\n<a id=\"iface-body\"></a>\n### Interface: Body\n\n`Body` is an abstract interface with methods that are applicable to both `Request` and `Response` classes.\n\nThe following methods are not yet implemented in node-fetch-npm at this moment:\n\n- `formData()`\n\n#### body.body\n\n<small>*(deviation from spec)*</small>\n\n* Node.js [`Readable` stream][node-readable]\n\nThe data encapsulated in the `Body` object. Note that while the [Fetch Standard][whatwg-fetch] requires the property to always be a WHATWG `ReadableStream`, in node-fetch-npm it is a Node.js [`Readable` stream][node-readable].\n\n#### body.bodyUsed\n\n<small>*(spec-compliant)*</small>\n\n* `Boolean`\n\nA boolean property for if this body has been consumed. Per spec, a consumed body cannot be used again.\n\n#### body.arrayBuffer()\n#### body.blob()\n#### body.json()\n#### body.text()\n\n<small>*(spec-compliant)*</small>\n\n* Returns: <code>Promise</code>\n\nConsume the body and return a promise that will resolve to one of these formats.\n\n#### body.buffer()\n\n<small>*(node-fetch-npm extension)*</small>\n\n* Returns: <code>Promise&lt;Buffer&gt;</code>\n\nConsume the body and return a promise that will resolve to a Buffer.\n\n#### body.textConverted()\n\n<small>*(node-fetch-npm extension)*</small>\n\n* Returns: <code>Promise&lt;String&gt;</code>\n\nIdentical to `body.text()`, except instead of always converting to UTF-8, encoding sniffing will be performed and text converted to UTF-8, if possible.\n\n<a id=\"class-fetcherror\"></a>\n### Class: FetchError\n\n<small>*(node-fetch-npm extension)*</small>\n\nAn operational error in the fetching process. See [ERROR-HANDLING.md][] for more info.\n\n## License\n\nMIT\n\n\n## Acknowledgement\n\nThanks to [github/fetch](https://github.com/github/fetch) for providing a solid implementation reference.\n\n\n[npm-image]: https://img.shields.io/npm/v/node-fetch-npm.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/node-fetch-npm\n[travis-image]: https://img.shields.io/travis/npm/node-fetch-npm.svg?style=flat-square\n[travis-url]: https://travis-ci.org/npm/node-fetch-npm\n[codecov-image]: https://img.shields.io/codecov/c/github/npm/node-fetch-npm.svg?style=flat-square\n[codecov-url]: https://codecov.io/gh/npm/node-fetch-npm\n[ERROR-HANDLING.md]: https://github.com/npm/node-fetch-npm/blob/master/ERROR-HANDLING.md\n[whatwg-fetch]: https://fetch.spec.whatwg.org/\n[response-init]: https://fetch.spec.whatwg.org/#responseinit\n[node-readable]: https://nodejs.org/api/stream.html#stream_readable_streams\n[mdn-headers]: https://developer.mozilla.org/en-US/docs/Web/API/Headers\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/node-fetch-npm.git"
  },
  "scripts": {
    "coverage": "nyc --reporter json --reporter text mocha -R spec test/test.js && codecov -f coverage/coverage-final.json",
    "postrelease": "npm publish && git push --follow-tags",
    "prerelease": "npm t",
    "pretest": "standard src/*",
    "release": "standard-version -s",
    "report": "nyc --reporter lcov --reporter text mocha -R spec test/test.js",
    "test": "mocha test/test.js",
    "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
    "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
  },
  "version": "2.0.2"
}
