{
  "_from": "pseudomap@^1.0.2",
  "_id": "pseudomap@1.0.2",
  "_inBundle": false,
  "_integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM=",
  "_location": "/npm/pseudomap",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "pseudomap@^1.0.2",
    "name": "pseudomap",
    "escapedName": "pseudomap",
    "rawSpec": "^1.0.2",
    "saveSpec": null,
    "fetchSpec": "^1.0.2"
  },
  "_requiredBy": [
    "/npm/lru-cache"
  ],
  "_resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
  "_shasum": "f052a28da70e618917ef0a8ac34c1ae5a68286b3",
  "_shrinkwrap": null,
  "_spec": "pseudomap@^1.0.2",
  "_where": "/Users/rebecca/code/npm/node_modules/lru-cache",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/pseudomap/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A thing that is a lot like ES6 `Map`, but without iterators, for use in environments where `for..of` syntax and `Map` are not available.",
  "devDependencies": {
    "tap": "^2.3.1"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/isaacs/pseudomap#readme",
  "license": "ISC",
  "main": "map.js",
  "name": "pseudomap",
  "optionalDependencies": {},
  "readme": "# pseudomap\n\nA thing that is a lot like ES6 `Map`, but without iterators, for use\nin environments where `for..of` syntax and `Map` are not available.\n\nIf you need iterators, or just in general a more faithful polyfill to\nES6 Maps, check out [es6-map](http://npm.im/es6-map).\n\nIf you are in an environment where `Map` is supported, then that will\nbe returned instead, unless `process.env.TEST_PSEUDOMAP` is set.\n\nYou can use any value as keys, and any value as data.  Setting again\nwith the identical key will overwrite the previous value.\n\nInternally, data is stored on an `Object.create(null)` style object.\nThe key is coerced to a string to generate the key on the internal\ndata-bag object.  The original key used is stored along with the data.\n\nIn the event of a stringified-key collision, a new key is generated by\nappending an increasing number to the stringified-key until finding\neither the intended key or an empty spot.\n\nNote that because object traversal order of plain objects is not\nguaranteed to be identical to insertion order, the insertion order\nguarantee of `Map.prototype.forEach` is not guaranteed in this\nimplementation.  However, in all versions of Node.js and V8 where this\nmodule works, `forEach` does traverse data in insertion order.\n\n## API\n\nMost of the [Map\nAPI](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map),\nwith the following exceptions:\n\n1. A `Map` object is not an iterator.\n2. `values`, `keys`, and `entries` methods are not implemented,\n   because they return iterators.\n3. The argument to the constructor can be an Array of `[key, value]`\n   pairs, or a `Map` or `PseudoMap` object.  But, since iterators\n   aren't used, passing any plain-old iterator won't initialize the\n   map properly.\n\n## USAGE\n\nUse just like a regular ES6 Map.\n\n```javascript\nvar PseudoMap = require('pseudomap')\n\n// optionally provide a pseudomap, or an array of [key,value] pairs\n// as the argument to initialize the map with\nvar myMap = new PseudoMap()\n\nmyMap.set(1, 'number 1')\nmyMap.set('1', 'string 1')\nvar akey = {}\nvar bkey = {}\nmyMap.set(akey, { some: 'data' })\nmyMap.set(bkey, { some: 'other data' })\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/isaacs/pseudomap.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "1.0.2"
}
