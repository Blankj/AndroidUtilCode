{
  "_args": [
    [
      "sha@2.0.1",
      "/Users/rebecca/code/npm"
    ]
  ],
  "_from": "sha@2.0.1",
  "_id": "sha@2.0.1",
  "_inBundle": false,
  "_integrity": "sha1-YDCCL70smCOUn49y7WQR7lzyWq4=",
  "_location": "/npm/sha",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "process-nextick-args": "2.0.0",
    "safe-buffer": "5.1.2",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "sha@2.0.1",
    "name": "sha",
    "escapedName": "sha",
    "rawSpec": "2.0.1",
    "saveSpec": null,
    "fetchSpec": "2.0.1"
  },
  "_requiredBy": [
    "/npm"
  ],
  "_resolved": "https://registry.npmjs.org/sha/-/sha-2.0.1.tgz",
  "_shrinkwrap": null,
  "_spec": "2.0.1",
  "_where": "/Users/rebecca/code/npm",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/sha/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.1.2",
    "readable-stream": "^2.0.2"
  },
  "description": "Check and get file hashes",
  "devDependencies": {
    "mocha": "~1.9.0"
  },
  "homepage": "https://github.com/ForbesLindesay/sha#readme",
  "license": "(BSD-2-Clause OR MIT)",
  "name": "sha",
  "optionalDependencies": {},
  "readme": "# sha\n\nCheck and get file hashes (using any algorithm)\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/sha/master.svg)](https://travis-ci.org/ForbesLindesay/sha)\n[![Dependency Status](https://img.shields.io/gemnasium/ForbesLindesay/sha.svg)](https://gemnasium.com/ForbesLindesay/sha)\n[![NPM version](https://img.shields.io/npm/v/sha.svg)](http://badge.fury.io/js/sha)\n\n## Installation\n\n    $ npm install sha\n\n## API\n\n### check(fileName, expected, [options,] cb) / checkSync(filename, expected, [options])\n\nAsynchronously check that `fileName` has a \"hash\" of `expected`.  The callback will be called with either `null` or an error (indicating that they did not match).\n\nOptions:\n\n- algorithm: defaults to `sha1` and can be any of the algorithms supported by `crypto.createHash`\n\n### get(fileName, [options,] cb) / getSync(filename, [options])\n\nAsynchronously get the \"hash\" of `fileName`.  The callback will be called with an optional `error` object and the (lower cased) hex digest of the hash.\n\nOptions:\n\n- algorithm: defaults to `sha1` and can be any of the algorithms supported by `crypto.createHash`\n\n### stream(expected, [options])\n\nCheck the hash of a stream without ever buffering it.  This is a pass through stream so you can do things like:\n\n```js\nfs.createReadStream('src')\n  .pipe(sha.stream('expected'))\n  .pipe(fs.createWriteStream('dest'))\n```\n\n`dest` will be a complete copy of `src` and an error will be emitted if the hash did not match `'expected'`.\n\nOptions:\n\n- algorithm: defaults to `sha1` and can be any of the algorithms supported by `crypto.createHash`\n\n## License\n\nYou may use this software under the BSD or MIT.  Take your pick.  If you want me to release it under another license, open a pull request.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ForbesLindesay/sha.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "2.0.1"
}
