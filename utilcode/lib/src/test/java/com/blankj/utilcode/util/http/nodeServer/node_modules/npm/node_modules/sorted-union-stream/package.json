{
  "_args": [
    [
      "sorted-union-stream@2.1.3",
      "/Users/rebecca/code/npm"
    ]
  ],
  "_from": "sorted-union-stream@2.1.3",
  "_id": "sorted-union-stream@2.1.3",
  "_inBundle": false,
  "_integrity": "sha1-x3lMfgd4gAUv9xqNSi27Sppjisc=",
  "_location": "/npm/sorted-union-stream",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3"
  },
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "sorted-union-stream@2.1.3",
    "name": "sorted-union-stream",
    "escapedName": "sorted-union-stream",
    "rawSpec": "2.1.3",
    "saveSpec": null,
    "fetchSpec": "2.1.3"
  },
  "_requiredBy": [
    "/npm"
  ],
  "_resolved": "https://registry.npmjs.org/sorted-union-stream/-/sorted-union-stream-2.1.3.tgz",
  "_shrinkwrap": null,
  "_spec": "2.1.3",
  "_where": "/Users/rebecca/code/npm",
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/sorted-union-stream/issues"
  },
  "dependencies": {
    "from2": "^1.3.0",
    "stream-iterate": "^1.1.0"
  },
  "description": "Get the union of two sorted streams",
  "devDependencies": {
    "standard": "^3.3.0",
    "tape": "^3.0.0"
  },
  "homepage": "https://github.com/mafintosh/sorted-union-stream",
  "keywords": [
    "union",
    "sorted",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "sorted-union-stream",
  "optionalDependencies": {},
  "readme": "# sorted-union-stream\n\nGet the union of two sorted streams\n\n```\nnpm install sorted-union-stream\n```\n\n[![build status](https://secure.travis-ci.org/mafintosh/sorted-union-stream.png)](http://travis-ci.org/mafintosh/sorted-union-stream)\n\n## Usage\n\n``` js\nvar union = require('sorted-union-stream')\nvar from = require('from2-array')\n\n// es.readArray converts an array into a stream\nvar sorted1 = from.obj([1,10,24,42,43,50,55])\nvar sorted2 = from.obj([10,42,53,55,60])\n\n// combine the two streams into a single sorted stream\nvar u = union(sorted1, sorted2)\n\nu.on('data', function(data) {\n  console.log(data)\n})\nu.on('end', function() {\n  console.log('no more data')\n})\n```\n\nRunning the above example will print\n\n```\n1\n10\n24\n42\n43\n50\n53\n55\n60\nno more data\n```\n\n## Streaming objects\n\nIf you are streaming objects sorting is based on `.key`.\n\nIf this property is not present you should add a `toKey` function as the third parameter.\n`toKey` should return an key representation of the data that can be used to compare objects.\n\n_The keys MUST be sorted_\n\n``` js\nvar sorted1 = from.obj([{foo:'a'}, {foo:'b'}, {foo:'c'}])\nvar sorted2 = from.obj([{foo:'b'}, {foo:'d'}])\n\nvar u = union(sorted1, sorted2, function(data) {\n  return data.foo // the foo property is sorted\n})\n\nunion.on('data', function(data) {\n  console.log(data)\n});\n```\n\nRunning the above will print\n\n```\n{foo:'a'}\n{foo:'b'}\n{foo:'c'}\n{foo:'d'}\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/sorted-union-stream.git"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "version": "2.1.3"
}
